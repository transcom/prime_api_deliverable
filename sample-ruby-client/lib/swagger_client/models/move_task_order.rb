=begin
#move.mil API

#The Prime API for move.mil

OpenAPI spec version: 0.0.1
Contact: dp3@truss.works
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'date'

module SwaggerClient
  class MoveTaskOrder
    attr_accessor :id

    attr_accessor :created_at

    attr_accessor :move_order_id

    attr_accessor :move_order

    attr_accessor :reference_id

    attr_accessor :is_available_to_prime

    attr_accessor :is_canceled

    attr_accessor :updated_at

    attr_accessor :payment_requests

    attr_accessor :mto_service_items

    attr_accessor :mto_shipments

    attr_accessor :ppm_type

    attr_accessor :ppm_estimated_weight

    attr_accessor :e_tag

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'created_at' => :'createdAt',
        :'move_order_id' => :'moveOrderID',
        :'move_order' => :'moveOrder',
        :'reference_id' => :'referenceId',
        :'is_available_to_prime' => :'isAvailableToPrime',
        :'is_canceled' => :'isCanceled',
        :'updated_at' => :'updatedAt',
        :'payment_requests' => :'paymentRequests',
        :'mto_service_items' => :'mtoServiceItems',
        :'mto_shipments' => :'mtoShipments',
        :'ppm_type' => :'ppmType',
        :'ppm_estimated_weight' => :'ppmEstimatedWeight',
        :'e_tag' => :'eTag'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'created_at' => :'Date',
        :'move_order_id' => :'String',
        :'move_order' => :'MoveOrder',
        :'reference_id' => :'String',
        :'is_available_to_prime' => :'BOOLEAN',
        :'is_canceled' => :'BOOLEAN',
        :'updated_at' => :'Date',
        :'payment_requests' => :'PaymentRequests',
        :'mto_service_items' => :'Array<MTOServiceItem>',
        :'mto_shipments' => :'MTOShipments',
        :'ppm_type' => :'String',
        :'ppm_estimated_weight' => :'Integer',
        :'e_tag' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'createdAt')
        self.created_at = attributes[:'createdAt']
      end

      if attributes.has_key?(:'moveOrderID')
        self.move_order_id = attributes[:'moveOrderID']
      end

      if attributes.has_key?(:'moveOrder')
        self.move_order = attributes[:'moveOrder']
      end

      if attributes.has_key?(:'referenceId')
        self.reference_id = attributes[:'referenceId']
      end

      if attributes.has_key?(:'isAvailableToPrime')
        self.is_available_to_prime = attributes[:'isAvailableToPrime']
      end

      if attributes.has_key?(:'isCanceled')
        self.is_canceled = attributes[:'isCanceled']
      end

      if attributes.has_key?(:'updatedAt')
        self.updated_at = attributes[:'updatedAt']
      end

      if attributes.has_key?(:'paymentRequests')
        self.payment_requests = attributes[:'paymentRequests']
      end

      if attributes.has_key?(:'mtoServiceItems')
        if (value = attributes[:'mtoServiceItems']).is_a?(Array)
          self.mto_service_items = value
        end
      end

      if attributes.has_key?(:'mtoShipments')
        self.mto_shipments = attributes[:'mtoShipments']
      end

      if attributes.has_key?(:'ppmType')
        self.ppm_type = attributes[:'ppmType']
      end

      if attributes.has_key?(:'ppmEstimatedWeight')
        self.ppm_estimated_weight = attributes[:'ppmEstimatedWeight']
      end

      if attributes.has_key?(:'eTag')
        self.e_tag = attributes[:'eTag']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @payment_requests.nil?
        invalid_properties.push('invalid value for "payment_requests", payment_requests cannot be nil.')
      end

      if @mto_service_items.nil?
        invalid_properties.push('invalid value for "mto_service_items", mto_service_items cannot be nil.')
      end

      if @mto_shipments.nil?
        invalid_properties.push('invalid value for "mto_shipments", mto_shipments cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @payment_requests.nil?
      return false if @mto_service_items.nil?
      return false if @mto_shipments.nil?
      ppm_type_validator = EnumAttributeValidator.new('String', ['FULL', 'PARTIAL'])
      return false unless ppm_type_validator.valid?(@ppm_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ppm_type Object to be assigned
    def ppm_type=(ppm_type)
      validator = EnumAttributeValidator.new('String', ['FULL', 'PARTIAL'])
      unless validator.valid?(ppm_type)
        fail ArgumentError, 'invalid value for "ppm_type", must be one of #{validator.allowable_values}.'
      end
      @ppm_type = ppm_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          created_at == o.created_at &&
          move_order_id == o.move_order_id &&
          move_order == o.move_order &&
          reference_id == o.reference_id &&
          is_available_to_prime == o.is_available_to_prime &&
          is_canceled == o.is_canceled &&
          updated_at == o.updated_at &&
          payment_requests == o.payment_requests &&
          mto_service_items == o.mto_service_items &&
          mto_shipments == o.mto_shipments &&
          ppm_type == o.ppm_type &&
          ppm_estimated_weight == o.ppm_estimated_weight &&
          e_tag == o.e_tag
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, created_at, move_order_id, move_order, reference_id, is_available_to_prime, is_canceled, updated_at, payment_requests, mto_service_items, mto_shipments, ppm_type, ppm_estimated_weight, e_tag].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
