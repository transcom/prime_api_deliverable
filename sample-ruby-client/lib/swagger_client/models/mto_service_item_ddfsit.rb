=begin
#move.mil API

#The Prime API for move.mil

OpenAPI spec version: 0.0.1
Contact: dp3@truss.works
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'date'

module SwaggerClient
  # Describes a domestic destination 1st day SIT service item subtype of a MTOServiceItem.
  class MTOServiceItemDDFSIT
    attr_accessor :id

    attr_accessor :move_task_order_id

    attr_accessor :mto_shipment_id

    attr_accessor :re_service_id

    attr_accessor :re_service_name

    attr_accessor :status

    attr_accessor :rejection_reason

    attr_accessor :model_type

    attr_accessor :e_tag

    attr_accessor :re_service_code

    attr_accessor :type

    attr_accessor :time_military1

    attr_accessor :first_available_delivery_date1

    attr_accessor :time_military2

    attr_accessor :first_available_delivery_date2

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'move_task_order_id' => :'moveTaskOrderID',
        :'mto_shipment_id' => :'mtoShipmentID',
        :'re_service_id' => :'reServiceID',
        :'re_service_name' => :'reServiceName',
        :'status' => :'status',
        :'rejection_reason' => :'rejectionReason',
        :'model_type' => :'modelType',
        :'e_tag' => :'eTag',
        :'re_service_code' => :'reServiceCode',
        :'type' => :'type',
        :'time_military1' => :'timeMilitary1',
        :'first_available_delivery_date1' => :'firstAvailableDeliveryDate1',
        :'time_military2' => :'timeMilitary2',
        :'first_available_delivery_date2' => :'firstAvailableDeliveryDate2'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'move_task_order_id' => :'String',
        :'mto_shipment_id' => :'String',
        :'re_service_id' => :'String',
        :'re_service_name' => :'String',
        :'status' => :'MTOServiceItemStatus',
        :'rejection_reason' => :'String',
        :'model_type' => :'MTOServiceItemModelType',
        :'e_tag' => :'String',
        :'re_service_code' => :'ReServiceCode',
        :'type' => :'CustomerContactType',
        :'time_military1' => :'String',
        :'first_available_delivery_date1' => :'Date',
        :'time_military2' => :'String',
        :'first_available_delivery_date2' => :'Date'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'moveTaskOrderID')
        self.move_task_order_id = attributes[:'moveTaskOrderID']
      end

      if attributes.has_key?(:'mtoShipmentID')
        self.mto_shipment_id = attributes[:'mtoShipmentID']
      end

      if attributes.has_key?(:'reServiceID')
        self.re_service_id = attributes[:'reServiceID']
      end

      if attributes.has_key?(:'reServiceName')
        self.re_service_name = attributes[:'reServiceName']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'rejectionReason')
        self.rejection_reason = attributes[:'rejectionReason']
      end

      if attributes.has_key?(:'modelType')
        self.model_type = attributes[:'modelType']
      end

      if attributes.has_key?(:'eTag')
        self.e_tag = attributes[:'eTag']
      end

      if attributes.has_key?(:'reServiceCode')
        self.re_service_code = attributes[:'reServiceCode']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'timeMilitary1')
        self.time_military1 = attributes[:'timeMilitary1']
      end

      if attributes.has_key?(:'firstAvailableDeliveryDate1')
        self.first_available_delivery_date1 = attributes[:'firstAvailableDeliveryDate1']
      end

      if attributes.has_key?(:'timeMilitary2')
        self.time_military2 = attributes[:'timeMilitary2']
      end

      if attributes.has_key?(:'firstAvailableDeliveryDate2')
        self.first_available_delivery_date2 = attributes[:'firstAvailableDeliveryDate2']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @model_type.nil?
        invalid_properties.push('invalid value for "model_type", model_type cannot be nil.')
      end

      if @time_military1.nil?
        invalid_properties.push('invalid value for "time_military1", time_military1 cannot be nil.')
      end

      if @first_available_delivery_date1.nil?
        invalid_properties.push('invalid value for "first_available_delivery_date1", first_available_delivery_date1 cannot be nil.')
      end

      if @time_military2.nil?
        invalid_properties.push('invalid value for "time_military2", time_military2 cannot be nil.')
      end

      if @first_available_delivery_date2.nil?
        invalid_properties.push('invalid value for "first_available_delivery_date2", first_available_delivery_date2 cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @model_type.nil?
      return false if @time_military1.nil?
      return false if @first_available_delivery_date1.nil?
      return false if @time_military2.nil?
      return false if @first_available_delivery_date2.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          move_task_order_id == o.move_task_order_id &&
          mto_shipment_id == o.mto_shipment_id &&
          re_service_id == o.re_service_id &&
          re_service_name == o.re_service_name &&
          status == o.status &&
          rejection_reason == o.rejection_reason &&
          model_type == o.model_type &&
          e_tag == o.e_tag &&
          re_service_code == o.re_service_code &&
          type == o.type &&
          time_military1 == o.time_military1 &&
          first_available_delivery_date1 == o.first_available_delivery_date1 &&
          time_military2 == o.time_military2 &&
          first_available_delivery_date2 == o.first_available_delivery_date2
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, move_task_order_id, mto_shipment_id, re_service_id, re_service_name, status, rejection_reason, model_type, e_tag, re_service_code, type, time_military1, first_available_delivery_date1, time_military2, first_available_delivery_date2].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
