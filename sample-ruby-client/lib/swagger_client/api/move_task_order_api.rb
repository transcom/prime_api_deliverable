=begin
#move.mil API

#The Prime API for move.mil

OpenAPI spec version: 0.0.1
Contact: dp3@truss.works
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'uri'

module SwaggerClient
  class MoveTaskOrderApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Gets all move task orders where `isAvailableToPrime` is TRUE
    # Gets all move task orders where `isAvailableToPrime` is TRUE. This prevents viewing any move task orders that have not been made available to the Prime. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :since Only return move task orders updated since this time.
    # @return [MoveTaskOrders]
    def fetch_mto_updates(opts = {})
      data, _status_code, _headers = fetch_mto_updates_with_http_info(opts)
      data
    end

    # Gets all move task orders where &#x60;isAvailableToPrime&#x60; is TRUE
    # Gets all move task orders where &#x60;isAvailableToPrime&#x60; is TRUE. This prevents viewing any move task orders that have not been made available to the Prime. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :since Only return move task orders updated since this time.
    # @return [Array<(MoveTaskOrders, Fixnum, Hash)>] MoveTaskOrders data, response status code and response headers
    def fetch_mto_updates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoveTaskOrderApi.fetch_mto_updates ...'
      end
      # resource path
      local_var_path = '/move-task-orders'

      # query parameters
      query_params = {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoveTaskOrders')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoveTaskOrderApi#fetch_mto_updates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets the customer associated with a move task order ID
    # Gets the customer associated with a move task order ID.
    # @param move_task_order_id ID of move order to use.
    # @param [Hash] opts the optional parameters
    # @return [Customer]
    def get_move_task_order_customer(move_task_order_id, opts = {})
      data, _status_code, _headers = get_move_task_order_customer_with_http_info(move_task_order_id, opts)
      data
    end

    # Gets the customer associated with a move task order ID
    # Gets the customer associated with a move task order ID.
    # @param move_task_order_id ID of move order to use.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Customer, Fixnum, Hash)>] Customer data, response status code and response headers
    def get_move_task_order_customer_with_http_info(move_task_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoveTaskOrderApi.get_move_task_order_customer ...'
      end
      # verify the required parameter 'move_task_order_id' is set
      if @api_client.config.client_side_validation && move_task_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'move_task_order_id' when calling MoveTaskOrderApi.get_move_task_order_customer"
      end
      # resource path
      local_var_path = '/move-task-orders/{moveTaskOrderID}/customer'.sub('{' + 'moveTaskOrderID' + '}', move_task_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoveTaskOrderApi#get_move_task_order_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates move task order's post counseling information
    # Updates move task order fields ppmType, ppmEstimatedWeight, and pointOfContact.
    # @param move_task_order_id ID of move task order to use.
    # @param body 
    # @param if_match Optimistic locking is implemented via the &#x60;If-Match&#x60; header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a &#x60;412 Precondition Failed&#x60; error. 
    # @param [Hash] opts the optional parameters
    # @return [MoveTaskOrder]
    def update_mto_post_counseling_information(move_task_order_id, body, if_match, opts = {})
      data, _status_code, _headers = update_mto_post_counseling_information_with_http_info(move_task_order_id, body, if_match, opts)
      data
    end

    # Updates move task order&#39;s post counseling information
    # Updates move task order fields ppmType, ppmEstimatedWeight, and pointOfContact.
    # @param move_task_order_id ID of move task order to use.
    # @param body 
    # @param if_match Optimistic locking is implemented via the &#x60;If-Match&#x60; header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a &#x60;412 Precondition Failed&#x60; error. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MoveTaskOrder, Fixnum, Hash)>] MoveTaskOrder data, response status code and response headers
    def update_mto_post_counseling_information_with_http_info(move_task_order_id, body, if_match, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoveTaskOrderApi.update_mto_post_counseling_information ...'
      end
      # verify the required parameter 'move_task_order_id' is set
      if @api_client.config.client_side_validation && move_task_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'move_task_order_id' when calling MoveTaskOrderApi.update_mto_post_counseling_information"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MoveTaskOrderApi.update_mto_post_counseling_information"
      end
      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling MoveTaskOrderApi.update_mto_post_counseling_information"
      end
      # resource path
      local_var_path = '/move-task-orders/{moveTaskOrderID}/post-counseling-info'.sub('{' + 'moveTaskOrderID' + '}', move_task_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'If-Match'] = if_match

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoveTaskOrder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoveTaskOrderApi#update_mto_post_counseling_information\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
