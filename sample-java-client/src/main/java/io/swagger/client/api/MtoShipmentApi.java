/*
 * move.mil API
 * The Prime API for move.mil
 *
 * OpenAPI spec version: 0.0.1
 * Contact: dp3@truss.works
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.MTOShipment;
import io.swagger.client.model.ResponsesPermissionDenied;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MtoShipmentApi {
    private ApiClient apiClient;

    public MtoShipmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MtoShipmentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for updateMTOShipment
     * @param moveTaskOrderID UUID of the move task order being used. (required)
     * @param mtoShipmentID UUID of the move task order shipment being updated. (required)
     * @param body  (required)
     * @param ifMatch Optimistic locking is implemented via the &#x60;If-Match&#x60; header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a &#x60;412 Precondition Failed&#x60; error.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMTOShipmentCall(UUID moveTaskOrderID, UUID mtoShipmentID, MTOShipment body, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/move-task-orders/{moveTaskOrderID}/mto-shipments/{mtoShipmentID}"
            .replaceAll("\\{" + "moveTaskOrderID" + "\\}", apiClient.escapeString(moveTaskOrderID.toString()))
            .replaceAll("\\{" + "mtoShipmentID" + "\\}", apiClient.escapeString(mtoShipmentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMTOShipmentValidateBeforeCall(UUID moveTaskOrderID, UUID mtoShipmentID, MTOShipment body, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'moveTaskOrderID' is set
        if (moveTaskOrderID == null) {
            throw new ApiException("Missing the required parameter 'moveTaskOrderID' when calling updateMTOShipment(Async)");
        }
        
        // verify the required parameter 'mtoShipmentID' is set
        if (mtoShipmentID == null) {
            throw new ApiException("Missing the required parameter 'mtoShipmentID' when calling updateMTOShipment(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateMTOShipment(Async)");
        }
        
        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling updateMTOShipment(Async)");
        }
        

        com.squareup.okhttp.Call call = updateMTOShipmentCall(moveTaskOrderID, mtoShipmentID, body, ifMatch, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates MTO shipment
     * Updates MTO shipment.
     * @param moveTaskOrderID UUID of the move task order being used. (required)
     * @param mtoShipmentID UUID of the move task order shipment being updated. (required)
     * @param body  (required)
     * @param ifMatch Optimistic locking is implemented via the &#x60;If-Match&#x60; header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a &#x60;412 Precondition Failed&#x60; error.  (required)
     * @return MTOShipment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MTOShipment updateMTOShipment(UUID moveTaskOrderID, UUID mtoShipmentID, MTOShipment body, String ifMatch) throws ApiException {
        ApiResponse<MTOShipment> resp = updateMTOShipmentWithHttpInfo(moveTaskOrderID, mtoShipmentID, body, ifMatch);
        return resp.getData();
    }

    /**
     * Updates MTO shipment
     * Updates MTO shipment.
     * @param moveTaskOrderID UUID of the move task order being used. (required)
     * @param mtoShipmentID UUID of the move task order shipment being updated. (required)
     * @param body  (required)
     * @param ifMatch Optimistic locking is implemented via the &#x60;If-Match&#x60; header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a &#x60;412 Precondition Failed&#x60; error.  (required)
     * @return ApiResponse&lt;MTOShipment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MTOShipment> updateMTOShipmentWithHttpInfo(UUID moveTaskOrderID, UUID mtoShipmentID, MTOShipment body, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = updateMTOShipmentValidateBeforeCall(moveTaskOrderID, mtoShipmentID, body, ifMatch, null, null);
        Type localVarReturnType = new TypeToken<MTOShipment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates MTO shipment (asynchronously)
     * Updates MTO shipment.
     * @param moveTaskOrderID UUID of the move task order being used. (required)
     * @param mtoShipmentID UUID of the move task order shipment being updated. (required)
     * @param body  (required)
     * @param ifMatch Optimistic locking is implemented via the &#x60;If-Match&#x60; header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a &#x60;412 Precondition Failed&#x60; error.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMTOShipmentAsync(UUID moveTaskOrderID, UUID mtoShipmentID, MTOShipment body, String ifMatch, final ApiCallback<MTOShipment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMTOShipmentValidateBeforeCall(moveTaskOrderID, mtoShipmentID, body, ifMatch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MTOShipment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
