{
  "item": [
    {
      "id": "moves",
      "name": "List All Moves",
      "request": {
        "description": {
          "content": "\nThis Postman Request was created with the Postman SDK and not the Postman.app\nUI.\n\nGets all moves that have been reviewed and approved by the TOO. The `since`\nparameter can be used to filter this list down to only the moves that have been\nupdated since the provided timestamp. A move will be considered updated if the\n`updatedAt` timestamp on the move or on its orders, shipments, service items,\nor payment requests, is later than the provided date and time.\n\nThis Request uses the templates found in\n**templates/visualize.html**.\n",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "moves"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Postman-Request-ID",
            "value": "moves"
          }
        ],
        "method": "GET",
        "body": {
          "mode": "raw",
          "raw": ""
        }
      },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "3c22cda7-ae68-4f55-842f-711f16a5d10d",
            "type": "text/javascript",
            "exec": [
              "function envGet(v) {",
              "  return pm.collectionVariables.get(v);",
              "}",
              "",
              "function envSet(k, v) {",
              "  pm.collectionVariables.set(k, v);",
              "}",
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "2c27e54d-cba2-45a5-a103-03e868c8490b",
            "type": "text/javascript",
            "exec": [
              "// A helpful function that's less characters to type to get a Collection",
              "// Variable.",
              "function envGet(v) {",
              "  return pm.collectionVariables.get(v);",
              "}",
              "",
              "// A helpful function that's less characters to type to set a Collection",
              "// Variable.",
              "function envSet(k, v) {",
              "  pm.collectionVariables.set(k, v);",
              "}",
              "",
              "// A helpful map of relationships between request file names and titles.",
              "const requestIDToTitle = {",
              "  'move-task-orders': 'Get MoveTaskOrder By ID',",
              "  moves: 'Get All Moves',",
              "  'mto-shipments-sit-extensions': 'Create SIT Extension For Shipment ID',",
              "};",
              "",
              "// The response JSON that Postman created.",
              "const response = pm.response.json();",
              "",
              "// The custom header for Postman Request ID which is the filename of the",
              "// ./requests files.",
              "const pmRequestID = pm.request.getHeaders()['Postman-Request-ID'];",
              "",
              "// The template file that is set in example-get-move-task-orders/index.js that",
              "// references example-get-move-task-orders/templates/visualize.html",
              "const template = envGet('visualizeTemplate');",
              "",
              "// A helpful string that can be used to show \"undefined\" in the Visualize tab.",
              "const undefHTML = '<code>undefined</code>';",
              "",
              "// The view object that gets fed into the template file. These are base values",
              "// and will be modified in the next conditional checks around the status code.",
              "var view = {",
              "  viewUpdatedAt: '',",
              "  pageTitle: requestIDToTitle[pmRequestID],",
              "  pageHeading: 'GHC Contractor',",
              "  pageAction: 'Receives Moves information',",
              "  alertTitle: '',",
              "  alertType: '',",
              "  customerFullName: envGet('customerFullName'),",
              "  moveCode: envGet('moveCode'),",
              "  moveID: envGet('moveID'),",
              "  mtoShipmentID: envGet('mtoShipmentID'),",
              "  mtoShipmentETag: envGet('mtoShipmentETag'),",
              "  reweighID: envGet('reweighID'),",
              "  reweighETag: envGet('reweighETag'),",
              "  errorMessage: '',",
              "  errorDetail: '',",
              "  errorTraceId: '',",
              "  move_task_orders: false,",
              "  moves: false,",
              "  mto_shipments_sit_extensions: false,",
              "  show_reweigh: false,",
              "  show_payment_request: false,",
              "  show_proof_of_service: false,",
              "  show_updated_mto_shipment: false,",
              "};",
              "",
              "view.viewUpdatedAt = `${new Date()}`;",
              "",
              "if (pm.response.code >= 300) {",
              "  console.debug(response);",
              "  view.alertTitle     = 'Something went wrong';",
              "  view.alertType      = 'error';",
              "  view.errorMessage   = response.title;",
              "  view.errorDetail    = response.detail;",
              "  view.errorTraceId   = response.instance;",
              "}",
              "",
              "if (pmRequestID === 'moves') {",
              "  view.moves = true;",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle = 'List All Moves';",
              "    view.pageAction = 'Get All Moves';",
              "    view.alertType  = 'success';",
              "    view.movesList = response;",
              "  }",
              "",
              "}",
              "",
              "if (pmRequestID === 'move-task-orders') {",
              "  view.move_task_orders = true;",
              "",
              "  // If the Move is found, we'll update the view object appropriately.",
              "  if (pm.response.code === 200) {",
              "    view.customerFullName = response.order.customer.firstName.trim();",
              "    view.customerFullName += ' ';",
              "    view.customerFullName += response.order.customer.lastName.trim();",
              "",
              "    console.info('Setting customerFullName in the Collection Variables');",
              "    envSet('customerFullName', view.customerFullName);",
              "",
              "    view.moveCode = response.moveCode;",
              "    view.moveID = response.id;",
              "",
              "    console.info('Setting moveTaskOrderCode, moveTaskOrderID, moveTaskOrderETag in the Collection Variables');",
              "    envSet('moveTaskOrderCode', view.moveCode);",
              "    envSet('moveTaskOrderID', view.moveID);",
              "    envSet('moveTaskOrderETag', response.eTag);",
              "    envSet('mtoShipmentID', response.mtoShipments[0].id);",
              "    envSet('mtoShipmentETag', response.mtoShipments[0].eTag);",
              "    if (response.mtoShipments[0].reweigh) {",
              "      envSet('reweighID', response.mtoShipments[0].reweigh.id);",
              "      envSet('reweighETag', response.mtoShipments[0].reweigh.eTag);",
              "      view.show_reweigh = true;",
              "    }",
              "",
              "    if (view.show_reweigh) {",
              "      const reweigh = response.mtoShipments[0].reweigh;",
              "      if (reweigh.weight || reweigh.verificationReason) {",
              "        // reweigh requested and performed",
              "        view.alertTitle = 'Reweigh has been requested and completed';",
              "        view.alertType  = 'success';",
              "      } else {",
              "        // reweigh requested but not performed yet",
              "        view.alertTitle = 'Reweigh has been requested';",
              "        view.alertType  = 'warning';",
              "      }",
              "      view.reweigh_details = {",
              "        id: reweigh.id,",
              "        requestedAt: reweigh.requestedAt,",
              "        requestedBy: reweigh.requestedBy,",
              "        weight: reweigh.weight,",
              "        verificationReason: reweigh.verificationReason,",
              "        verificationProvidedAt: reweigh.verificationProvidedAt,",
              "      }",
              "    } else {",
              "      view.alertTitle = 'Move is now available to GHC Prime Contractor';",
              "      view.alertType  = 'success';",
              "    }",
              "",
              "    // prepare a payment request",
              "    const paymentRequest = {",
              "      isFinal: false,",
              "      moveTaskOrderID: view.moveID,",
              "      serviceItems: []",
              "    };",
              "    const serviceItemsToInvoice = envGet('serviceItemsToInvoice');",
              "    response.mtoServiceItems",
              "      .filter((serviceItem) => {",
              "        return serviceItemsToInvoice.includes(serviceItem.reServiceCode) && serviceItem.mtoShipmentID === response.mtoShipments[0].id;",
              "      })",
              "      .forEach((serviceItem) => {",
              "        console.info(serviceItem);",
              "        const si = { id: serviceItem.id };",
              "        if (serviceItem.reServiceCode === \"DDASIT\") {",
              "          si.params = [{",
              "",
              "            key: \"SITPaymentRequestStart\",",
              "            value: \"2021-09-01\",",
              "          },{",
              "            key: \"SITPaymentRequestEnd\",",
              "            value: \"2021-09-30\",",
              "          }];",
              "        }",
              "        paymentRequest.serviceItems.add(si);",
              "      });",
              "    envSet('paymentRequestPayload', JSON.stringify(paymentRequest, null, 2));",
              "    console.info(envGet('paymentRequestPayload'));",
              "  }",
              "",
              "  // If the Move is not found, we'll update the view object appropriately.",
              "  if (pm.response.code === 404) {",
              "    view.alertTitle   = 'Move is not available to GHC Prime Contractor';",
              "    view.alertType    = 'error';",
              "    view.moveCode     = undefHTML;",
              "    view.moveID       = undefHTML;",
              "    view.errorMessage = response.title;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-sit-mto-service-items') {",
              "  view.create_sit_mto_service_items = true;",
              "  view.pageAction = 'Create Destination SIT Service Items';",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle     = 'Destination SIT Service Items Created';",
              "    view.alertType      = 'success';",
              "    view.sitServiceItem = response;",
              "  } else {",
              "    view.alertTitle     = 'Destination SIT Service Items Create Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'mto-shipments-sit-extensions') {",
              "  view.mto_shipments_sit_extensions = true;",
              "",
              "  if (pm.response.code === 201) {",
              "    view.alertTitle = 'SIT Extension Created';",
              "    view.alertType  = 'success';",
              "    view.pageAction = 'Create SIT Extension';",
              "    view.sitExtension = response;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-payment-request') {",
              "  view.show_payment_request = true",
              "  view.pageAction = 'Payment Request Creation';",
              "  if (pm.response.code == 201) {",
              "    let total = 0;",
              "    view.alertTitle = 'Creation Succeeded';",
              "    view.alertType = 'success';",
              "    envSet('paymentRequestID', response.id);",
              "    view.paymentRequest = response;",
              "    view.paymentRequest.paymentServiceItems.forEach(psi => total += psi.priceCents);",
              "    total = total/100",
              "    view.paymentRequest.total = total;",
              "    view.paymentRequest.payload = request.data;",
              "  } else {",
              "    view.alertTitle = 'Creation Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'upload-proof-of-service') {",
              "  view.show_proof_of_service = true",
              "  view.pageAction = 'Proof of Service Upload';",
              "  if (pm.response.code == 201) {",
              "    view.alertTitle = 'Upload Succeeded';",
              "    view.alertType = 'success';",
              "    view.proofOfServiceDetails = response;",
              "  } else {",
              "    view.alertTitle = 'Upload Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// response from update-mto-shipment endpoint is shipment JSON with new eTag",
              "if (request.url.includes('/prime/v1/mto-shipments') && request.method === \"PATCH\") {",
              "  view.show_updated_mto_shipment = true",
              "  view.pageAction = 'Update Shipment';",
              "  if (pm.response.code == 200) {",
              "    envSet('mtoShipmentETag', response.eTag);",
              "    view.alertTitle = 'Update Succeeded';",
              "    view.alertType = 'success';",
              "    view.updatesMade = {};",
              "    Object.keys(JSON.parse(request.data)).forEach((key) => {",
              "      view.updatesMade[key] = response[key];",
              "    })",
              "  } else {",
              "    view.alertTitle = 'Update Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// Setup the visualization template.",
              "pm.visualizer.set(template, view);",
              ""
            ]
          }
        }
      ]
    },
    {
      "id": "move-task-orders",
      "name": "MoveTaskOrders by ID",
      "request": {
        "description": {
          "content": "\nThis Postman Request was created with the Postman SDK and not the Postman.app\nUI.\n\nThis endpoint gets an individual MoveTaskOrder by ID.\n\nIt will provide information about the Customer and any associated MTOShipments,\nMTOServiceItems and PaymentRequests.\n\nThis Request uses the templates found in\n**templates/visualize.html**.\n",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "move-task-orders",
            "{{moveTaskOrderID}}"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Postman-Request-ID",
            "value": "move-task-orders"
          }
        ],
        "method": "GET",
        "body": {
          "mode": "raw",
          "raw": ""
        }
      },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "e0a31cdc-2bd5-471a-8e17-a7a7f44f7f14",
            "type": "text/javascript",
            "exec": [
              "function envGet(v) {",
              "  return pm.collectionVariables.get(v);",
              "}",
              "",
              "function envSet(k, v) {",
              "  pm.collectionVariables.set(k, v);",
              "}",
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "49b4329d-862f-4666-8855-284aad7373dc",
            "type": "text/javascript",
            "exec": [
              "// A helpful function that's less characters to type to get a Collection",
              "// Variable.",
              "function envGet(v) {",
              "  return pm.collectionVariables.get(v);",
              "}",
              "",
              "// A helpful function that's less characters to type to set a Collection",
              "// Variable.",
              "function envSet(k, v) {",
              "  pm.collectionVariables.set(k, v);",
              "}",
              "",
              "// A helpful map of relationships between request file names and titles.",
              "const requestIDToTitle = {",
              "  'move-task-orders': 'Get MoveTaskOrder By ID',",
              "  moves: 'Get All Moves',",
              "  'mto-shipments-sit-extensions': 'Create SIT Extension For Shipment ID',",
              "};",
              "",
              "// The response JSON that Postman created.",
              "const response = pm.response.json();",
              "",
              "// The custom header for Postman Request ID which is the filename of the",
              "// ./requests files.",
              "const pmRequestID = pm.request.getHeaders()['Postman-Request-ID'];",
              "",
              "// The template file that is set in example-get-move-task-orders/index.js that",
              "// references example-get-move-task-orders/templates/visualize.html",
              "const template = envGet('visualizeTemplate');",
              "",
              "// A helpful string that can be used to show \"undefined\" in the Visualize tab.",
              "const undefHTML = '<code>undefined</code>';",
              "",
              "// The view object that gets fed into the template file. These are base values",
              "// and will be modified in the next conditional checks around the status code.",
              "var view = {",
              "  viewUpdatedAt: '',",
              "  pageTitle: requestIDToTitle[pmRequestID],",
              "  pageHeading: 'GHC Contractor',",
              "  pageAction: 'Receives Moves information',",
              "  alertTitle: '',",
              "  alertType: '',",
              "  customerFullName: envGet('customerFullName'),",
              "  moveCode: envGet('moveCode'),",
              "  moveID: envGet('moveID'),",
              "  mtoShipmentID: envGet('mtoShipmentID'),",
              "  mtoShipmentETag: envGet('mtoShipmentETag'),",
              "  reweighID: envGet('reweighID'),",
              "  reweighETag: envGet('reweighETag'),",
              "  errorMessage: '',",
              "  errorDetail: '',",
              "  errorTraceId: '',",
              "  move_task_orders: false,",
              "  moves: false,",
              "  mto_shipments_sit_extensions: false,",
              "  show_reweigh: false,",
              "  show_payment_request: false,",
              "  show_proof_of_service: false,",
              "  show_updated_mto_shipment: false,",
              "};",
              "",
              "view.viewUpdatedAt = `${new Date()}`;",
              "",
              "if (pm.response.code >= 300) {",
              "  console.debug(response);",
              "  view.alertTitle     = 'Something went wrong';",
              "  view.alertType      = 'error';",
              "  view.errorMessage   = response.title;",
              "  view.errorDetail    = response.detail;",
              "  view.errorTraceId   = response.instance;",
              "}",
              "",
              "if (pmRequestID === 'moves') {",
              "  view.moves = true;",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle = 'List All Moves';",
              "    view.pageAction = 'Get All Moves';",
              "    view.alertType  = 'success';",
              "    view.movesList = response;",
              "  }",
              "",
              "}",
              "",
              "if (pmRequestID === 'move-task-orders') {",
              "  view.move_task_orders = true;",
              "",
              "  // If the Move is found, we'll update the view object appropriately.",
              "  if (pm.response.code === 200) {",
              "    view.customerFullName = response.order.customer.firstName.trim();",
              "    view.customerFullName += ' ';",
              "    view.customerFullName += response.order.customer.lastName.trim();",
              "",
              "    console.info('Setting customerFullName in the Collection Variables');",
              "    envSet('customerFullName', view.customerFullName);",
              "",
              "    view.moveCode = response.moveCode;",
              "    view.moveID = response.id;",
              "",
              "    console.info('Setting moveTaskOrderCode, moveTaskOrderID, moveTaskOrderETag in the Collection Variables');",
              "    envSet('moveTaskOrderCode', view.moveCode);",
              "    envSet('moveTaskOrderID', view.moveID);",
              "    envSet('moveTaskOrderETag', response.eTag);",
              "    envSet('mtoShipmentID', response.mtoShipments[0].id);",
              "    envSet('mtoShipmentETag', response.mtoShipments[0].eTag);",
              "    if (response.mtoShipments[0].reweigh) {",
              "      envSet('reweighID', response.mtoShipments[0].reweigh.id);",
              "      envSet('reweighETag', response.mtoShipments[0].reweigh.eTag);",
              "      view.show_reweigh = true;",
              "    }",
              "",
              "    if (view.show_reweigh) {",
              "      const reweigh = response.mtoShipments[0].reweigh;",
              "      if (reweigh.weight || reweigh.verificationReason) {",
              "        // reweigh requested and performed",
              "        view.alertTitle = 'Reweigh has been requested and completed';",
              "        view.alertType  = 'success';",
              "      } else {",
              "        // reweigh requested but not performed yet",
              "        view.alertTitle = 'Reweigh has been requested';",
              "        view.alertType  = 'warning';",
              "      }",
              "      view.reweigh_details = {",
              "        id: reweigh.id,",
              "        requestedAt: reweigh.requestedAt,",
              "        requestedBy: reweigh.requestedBy,",
              "        weight: reweigh.weight,",
              "        verificationReason: reweigh.verificationReason,",
              "        verificationProvidedAt: reweigh.verificationProvidedAt,",
              "      }",
              "    } else {",
              "      view.alertTitle = 'Move is now available to GHC Prime Contractor';",
              "      view.alertType  = 'success';",
              "    }",
              "",
              "    // prepare a payment request",
              "    const paymentRequest = {",
              "      isFinal: false,",
              "      moveTaskOrderID: view.moveID,",
              "      serviceItems: []",
              "    };",
              "    const serviceItemsToInvoice = envGet('serviceItemsToInvoice');",
              "    response.mtoServiceItems",
              "      .filter((serviceItem) => {",
              "        return serviceItemsToInvoice.includes(serviceItem.reServiceCode) && serviceItem.mtoShipmentID === response.mtoShipments[0].id;",
              "      })",
              "      .forEach((serviceItem) => {",
              "        console.info(serviceItem);",
              "        const si = { id: serviceItem.id };",
              "        if (serviceItem.reServiceCode === \"DDASIT\") {",
              "          si.params = [{",
              "",
              "            key: \"SITPaymentRequestStart\",",
              "            value: \"2021-09-01\",",
              "          },{",
              "            key: \"SITPaymentRequestEnd\",",
              "            value: \"2021-09-30\",",
              "          }];",
              "        }",
              "        paymentRequest.serviceItems.add(si);",
              "      });",
              "    envSet('paymentRequestPayload', JSON.stringify(paymentRequest, null, 2));",
              "    console.info(envGet('paymentRequestPayload'));",
              "  }",
              "",
              "  // If the Move is not found, we'll update the view object appropriately.",
              "  if (pm.response.code === 404) {",
              "    view.alertTitle   = 'Move is not available to GHC Prime Contractor';",
              "    view.alertType    = 'error';",
              "    view.moveCode     = undefHTML;",
              "    view.moveID       = undefHTML;",
              "    view.errorMessage = response.title;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-sit-mto-service-items') {",
              "  view.create_sit_mto_service_items = true;",
              "  view.pageAction = 'Create Destination SIT Service Items';",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle     = 'Destination SIT Service Items Created';",
              "    view.alertType      = 'success';",
              "    view.sitServiceItem = response;",
              "  } else {",
              "    view.alertTitle     = 'Destination SIT Service Items Create Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'mto-shipments-sit-extensions') {",
              "  view.mto_shipments_sit_extensions = true;",
              "",
              "  if (pm.response.code === 201) {",
              "    view.alertTitle = 'SIT Extension Created';",
              "    view.alertType  = 'success';",
              "    view.pageAction = 'Create SIT Extension';",
              "    view.sitExtension = response;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-payment-request') {",
              "  view.show_payment_request = true",
              "  view.pageAction = 'Payment Request Creation';",
              "  if (pm.response.code == 201) {",
              "    let total = 0;",
              "    view.alertTitle = 'Creation Succeeded';",
              "    view.alertType = 'success';",
              "    envSet('paymentRequestID', response.id);",
              "    view.paymentRequest = response;",
              "    view.paymentRequest.paymentServiceItems.forEach(psi => total += psi.priceCents);",
              "    total = total/100",
              "    view.paymentRequest.total = total;",
              "    view.paymentRequest.payload = request.data;",
              "  } else {",
              "    view.alertTitle = 'Creation Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'upload-proof-of-service') {",
              "  view.show_proof_of_service = true",
              "  view.pageAction = 'Proof of Service Upload';",
              "  if (pm.response.code == 201) {",
              "    view.alertTitle = 'Upload Succeeded';",
              "    view.alertType = 'success';",
              "    view.proofOfServiceDetails = response;",
              "  } else {",
              "    view.alertTitle = 'Upload Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// response from update-mto-shipment endpoint is shipment JSON with new eTag",
              "if (request.url.includes('/prime/v1/mto-shipments') && request.method === \"PATCH\") {",
              "  view.show_updated_mto_shipment = true",
              "  view.pageAction = 'Update Shipment';",
              "  if (pm.response.code == 200) {",
              "    envSet('mtoShipmentETag', response.eTag);",
              "    view.alertTitle = 'Update Succeeded';",
              "    view.alertType = 'success';",
              "    view.updatesMade = {};",
              "    Object.keys(JSON.parse(request.data)).forEach((key) => {",
              "      view.updatesMade[key] = response[key];",
              "    })",
              "  } else {",
              "    view.alertTitle = 'Update Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// Setup the visualization template.",
              "pm.visualizer.set(template, view);",
              ""
            ]
          }
        }
      ]
    },
    {
      "id": "create-sit-mto-service-items",
      "name": "Create DDFSIT & DDASIT",
      "request": {
        "description": {
          "content": "\nThis Postman Request was created with the Postman SDK and not the Postman.app\nUI.\n\nThis endpoint creates a storage in transit (SIT) service item for a\nshipment.\n\nThis Request uses the templates found in\n**templates/visualize.html**.\n",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "mto-service-items"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Postman-Request-ID",
            "value": "create-sit-mto-service-items"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "body": {
          "mode": "raw",
          "raw": "{\n  \"moveTaskOrderID\": \"{{moveTaskOrderID}}\",\n  \"mtoShipmentID\": \"{{mtoShipmentID}}\",\n  \"modelType\": \"MTOServiceItemDestSIT\",\n  \"reServiceCode\": \"DDFSIT\",\n  \"firstAvailableDeliveryDate1\": \"{{sitDate}}\",\n  \"timeMilitary1\": \"0942Z\",\n  \"firstAvailableDeliveryDate2\": \"{{sitDate}}\",\n  \"timeMilitary2\": \"0942Z\",\n  \"sitEntryDate\": \"{{sitDate}}\"\n}"
        }
      },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "b7724561-710b-4b0b-9b59-8f897c63c7df",
            "type": "text/javascript",
            "exec": [
              "function envGet(v) {",
              "  return pm.collectionVariables.get(v);",
              "}",
              "",
              "function envSet(k, v) {",
              "  pm.collectionVariables.set(k, v);",
              "}",
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "bb19e1bf-3b84-48c5-b669-172c7571a17f",
            "type": "text/javascript",
            "exec": [
              "// A helpful function that's less characters to type to get a Collection",
              "// Variable.",
              "function envGet(v) {",
              "  return pm.collectionVariables.get(v);",
              "}",
              "",
              "// A helpful function that's less characters to type to set a Collection",
              "// Variable.",
              "function envSet(k, v) {",
              "  pm.collectionVariables.set(k, v);",
              "}",
              "",
              "// A helpful map of relationships between request file names and titles.",
              "const requestIDToTitle = {",
              "  'move-task-orders': 'Get MoveTaskOrder By ID',",
              "  moves: 'Get All Moves',",
              "  'mto-shipments-sit-extensions': 'Create SIT Extension For Shipment ID',",
              "};",
              "",
              "// The response JSON that Postman created.",
              "const response = pm.response.json();",
              "",
              "// The custom header for Postman Request ID which is the filename of the",
              "// ./requests files.",
              "const pmRequestID = pm.request.getHeaders()['Postman-Request-ID'];",
              "",
              "// The template file that is set in example-get-move-task-orders/index.js that",
              "// references example-get-move-task-orders/templates/visualize.html",
              "const template = envGet('visualizeTemplate');",
              "",
              "// A helpful string that can be used to show \"undefined\" in the Visualize tab.",
              "const undefHTML = '<code>undefined</code>';",
              "",
              "// The view object that gets fed into the template file. These are base values",
              "// and will be modified in the next conditional checks around the status code.",
              "var view = {",
              "  viewUpdatedAt: '',",
              "  pageTitle: requestIDToTitle[pmRequestID],",
              "  pageHeading: 'GHC Contractor',",
              "  pageAction: 'Receives Moves information',",
              "  alertTitle: '',",
              "  alertType: '',",
              "  customerFullName: envGet('customerFullName'),",
              "  moveCode: envGet('moveCode'),",
              "  moveID: envGet('moveID'),",
              "  mtoShipmentID: envGet('mtoShipmentID'),",
              "  mtoShipmentETag: envGet('mtoShipmentETag'),",
              "  reweighID: envGet('reweighID'),",
              "  reweighETag: envGet('reweighETag'),",
              "  errorMessage: '',",
              "  errorDetail: '',",
              "  errorTraceId: '',",
              "  move_task_orders: false,",
              "  moves: false,",
              "  mto_shipments_sit_extensions: false,",
              "  show_reweigh: false,",
              "  show_payment_request: false,",
              "  show_proof_of_service: false,",
              "  show_updated_mto_shipment: false,",
              "};",
              "",
              "view.viewUpdatedAt = `${new Date()}`;",
              "",
              "if (pm.response.code >= 300) {",
              "  console.debug(response);",
              "  view.alertTitle     = 'Something went wrong';",
              "  view.alertType      = 'error';",
              "  view.errorMessage   = response.title;",
              "  view.errorDetail    = response.detail;",
              "  view.errorTraceId   = response.instance;",
              "}",
              "",
              "if (pmRequestID === 'moves') {",
              "  view.moves = true;",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle = 'List All Moves';",
              "    view.pageAction = 'Get All Moves';",
              "    view.alertType  = 'success';",
              "    view.movesList = response;",
              "  }",
              "",
              "}",
              "",
              "if (pmRequestID === 'move-task-orders') {",
              "  view.move_task_orders = true;",
              "",
              "  // If the Move is found, we'll update the view object appropriately.",
              "  if (pm.response.code === 200) {",
              "    view.customerFullName = response.order.customer.firstName.trim();",
              "    view.customerFullName += ' ';",
              "    view.customerFullName += response.order.customer.lastName.trim();",
              "",
              "    console.info('Setting customerFullName in the Collection Variables');",
              "    envSet('customerFullName', view.customerFullName);",
              "",
              "    view.moveCode = response.moveCode;",
              "    view.moveID = response.id;",
              "",
              "    console.info('Setting moveTaskOrderCode, moveTaskOrderID, moveTaskOrderETag in the Collection Variables');",
              "    envSet('moveTaskOrderCode', view.moveCode);",
              "    envSet('moveTaskOrderID', view.moveID);",
              "    envSet('moveTaskOrderETag', response.eTag);",
              "    envSet('mtoShipmentID', response.mtoShipments[0].id);",
              "    envSet('mtoShipmentETag', response.mtoShipments[0].eTag);",
              "    if (response.mtoShipments[0].reweigh) {",
              "      envSet('reweighID', response.mtoShipments[0].reweigh.id);",
              "      envSet('reweighETag', response.mtoShipments[0].reweigh.eTag);",
              "      view.show_reweigh = true;",
              "    }",
              "",
              "    if (view.show_reweigh) {",
              "      const reweigh = response.mtoShipments[0].reweigh;",
              "      if (reweigh.weight || reweigh.verificationReason) {",
              "        // reweigh requested and performed",
              "        view.alertTitle = 'Reweigh has been requested and completed';",
              "        view.alertType  = 'success';",
              "      } else {",
              "        // reweigh requested but not performed yet",
              "        view.alertTitle = 'Reweigh has been requested';",
              "        view.alertType  = 'warning';",
              "      }",
              "      view.reweigh_details = {",
              "        id: reweigh.id,",
              "        requestedAt: reweigh.requestedAt,",
              "        requestedBy: reweigh.requestedBy,",
              "        weight: reweigh.weight,",
              "        verificationReason: reweigh.verificationReason,",
              "        verificationProvidedAt: reweigh.verificationProvidedAt,",
              "      }",
              "    } else {",
              "      view.alertTitle = 'Move is now available to GHC Prime Contractor';",
              "      view.alertType  = 'success';",
              "    }",
              "",
              "    // prepare a payment request",
              "    const paymentRequest = {",
              "      isFinal: false,",
              "      moveTaskOrderID: view.moveID,",
              "      serviceItems: []",
              "    };",
              "    const serviceItemsToInvoice = envGet('serviceItemsToInvoice');",
              "    response.mtoServiceItems",
              "      .filter((serviceItem) => {",
              "        return serviceItemsToInvoice.includes(serviceItem.reServiceCode) && serviceItem.mtoShipmentID === response.mtoShipments[0].id;",
              "      })",
              "      .forEach((serviceItem) => {",
              "        console.info(serviceItem);",
              "        const si = { id: serviceItem.id };",
              "        if (serviceItem.reServiceCode === \"DDASIT\") {",
              "          si.params = [{",
              "",
              "            key: \"SITPaymentRequestStart\",",
              "            value: \"2021-09-01\",",
              "          },{",
              "            key: \"SITPaymentRequestEnd\",",
              "            value: \"2021-09-30\",",
              "          }];",
              "        }",
              "        paymentRequest.serviceItems.add(si);",
              "      });",
              "    envSet('paymentRequestPayload', JSON.stringify(paymentRequest, null, 2));",
              "    console.info(envGet('paymentRequestPayload'));",
              "  }",
              "",
              "  // If the Move is not found, we'll update the view object appropriately.",
              "  if (pm.response.code === 404) {",
              "    view.alertTitle   = 'Move is not available to GHC Prime Contractor';",
              "    view.alertType    = 'error';",
              "    view.moveCode     = undefHTML;",
              "    view.moveID       = undefHTML;",
              "    view.errorMessage = response.title;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-sit-mto-service-items') {",
              "  view.create_sit_mto_service_items = true;",
              "  view.pageAction = 'Create Destination SIT Service Items';",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle     = 'Destination SIT Service Items Created';",
              "    view.alertType      = 'success';",
              "    view.sitServiceItem = response;",
              "  } else {",
              "    view.alertTitle     = 'Destination SIT Service Items Create Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'mto-shipments-sit-extensions') {",
              "  view.mto_shipments_sit_extensions = true;",
              "",
              "  if (pm.response.code === 201) {",
              "    view.alertTitle = 'SIT Extension Created';",
              "    view.alertType  = 'success';",
              "    view.pageAction = 'Create SIT Extension';",
              "    view.sitExtension = response;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-payment-request') {",
              "  view.show_payment_request = true",
              "  view.pageAction = 'Payment Request Creation';",
              "  if (pm.response.code == 201) {",
              "    let total = 0;",
              "    view.alertTitle = 'Creation Succeeded';",
              "    view.alertType = 'success';",
              "    envSet('paymentRequestID', response.id);",
              "    view.paymentRequest = response;",
              "    view.paymentRequest.paymentServiceItems.forEach(psi => total += psi.priceCents);",
              "    total = total/100",
              "    view.paymentRequest.total = total;",
              "    view.paymentRequest.payload = request.data;",
              "  } else {",
              "    view.alertTitle = 'Creation Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'upload-proof-of-service') {",
              "  view.show_proof_of_service = true",
              "  view.pageAction = 'Proof of Service Upload';",
              "  if (pm.response.code == 201) {",
              "    view.alertTitle = 'Upload Succeeded';",
              "    view.alertType = 'success';",
              "    view.proofOfServiceDetails = response;",
              "  } else {",
              "    view.alertTitle = 'Upload Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// response from update-mto-shipment endpoint is shipment JSON with new eTag",
              "if (request.url.includes('/prime/v1/mto-shipments') && request.method === \"PATCH\") {",
              "  view.show_updated_mto_shipment = true",
              "  view.pageAction = 'Update Shipment';",
              "  if (pm.response.code == 200) {",
              "    envSet('mtoShipmentETag', response.eTag);",
              "    view.alertTitle = 'Update Succeeded';",
              "    view.alertType = 'success';",
              "    view.updatesMade = {};",
              "    Object.keys(JSON.parse(request.data)).forEach((key) => {",
              "      view.updatesMade[key] = response[key];",
              "    })",
              "  } else {",
              "    view.alertTitle = 'Update Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// Setup the visualization template.",
              "pm.visualizer.set(template, view);",
              ""
            ]
          }
        }
      ]
    },
    {
      "id": "mto-shipments-sit-extensions",
      "name": "Create SIT Extension",
      "request": {
        "description": {
          "content": "\nThis Postman Request was created with the Postman SDK and not the Postman.app\nUI.\n\nThis endpoint creates a storage in transit (SIT) extension request for a\nshipment. A SIT extension request is a request an increase in the shipment day\nallowance for the number of days a shipment is allowed to be in SIT. The total\nSIT day allowance includes time spent in both origin and destination SIT.\n\nThis Request uses the templates found in\n**templates/visualize.html**.\n",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "mto-shipments",
            "{{mtoShipmentID}}",
            "sit-extensions"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Postman-Request-ID",
            "value": "mto-shipments-sit-extensions"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "body": {
          "mode": "raw",
          "raw": "{\n  \"requestReason\": \"NONAVAILABILITY_OF_CIVILIAN_HOUSING\",\n  \"contractorRemarks\": \"Customer is in the middle of closing on a house, expects it to be in 10 days.\",\n  \"requestedDays\": 30\n}"
        }
      },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "224419ae-d524-4325-850e-49d6da51c4db",
            "type": "text/javascript",
            "exec": [
              "function envGet(v) {",
              "  return pm.collectionVariables.get(v);",
              "}",
              "",
              "function envSet(k, v) {",
              "  pm.collectionVariables.set(k, v);",
              "}",
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "28128529-092b-4297-81f5-56ee0df2b321",
            "type": "text/javascript",
            "exec": [
              "// A helpful function that's less characters to type to get a Collection",
              "// Variable.",
              "function envGet(v) {",
              "  return pm.collectionVariables.get(v);",
              "}",
              "",
              "// A helpful function that's less characters to type to set a Collection",
              "// Variable.",
              "function envSet(k, v) {",
              "  pm.collectionVariables.set(k, v);",
              "}",
              "",
              "// A helpful map of relationships between request file names and titles.",
              "const requestIDToTitle = {",
              "  'move-task-orders': 'Get MoveTaskOrder By ID',",
              "  moves: 'Get All Moves',",
              "  'mto-shipments-sit-extensions': 'Create SIT Extension For Shipment ID',",
              "};",
              "",
              "// The response JSON that Postman created.",
              "const response = pm.response.json();",
              "",
              "// The custom header for Postman Request ID which is the filename of the",
              "// ./requests files.",
              "const pmRequestID = pm.request.getHeaders()['Postman-Request-ID'];",
              "",
              "// The template file that is set in example-get-move-task-orders/index.js that",
              "// references example-get-move-task-orders/templates/visualize.html",
              "const template = envGet('visualizeTemplate');",
              "",
              "// A helpful string that can be used to show \"undefined\" in the Visualize tab.",
              "const undefHTML = '<code>undefined</code>';",
              "",
              "// The view object that gets fed into the template file. These are base values",
              "// and will be modified in the next conditional checks around the status code.",
              "var view = {",
              "  viewUpdatedAt: '',",
              "  pageTitle: requestIDToTitle[pmRequestID],",
              "  pageHeading: 'GHC Contractor',",
              "  pageAction: 'Receives Moves information',",
              "  alertTitle: '',",
              "  alertType: '',",
              "  customerFullName: envGet('customerFullName'),",
              "  moveCode: envGet('moveCode'),",
              "  moveID: envGet('moveID'),",
              "  mtoShipmentID: envGet('mtoShipmentID'),",
              "  mtoShipmentETag: envGet('mtoShipmentETag'),",
              "  reweighID: envGet('reweighID'),",
              "  reweighETag: envGet('reweighETag'),",
              "  errorMessage: '',",
              "  errorDetail: '',",
              "  errorTraceId: '',",
              "  move_task_orders: false,",
              "  moves: false,",
              "  mto_shipments_sit_extensions: false,",
              "  show_reweigh: false,",
              "  show_payment_request: false,",
              "  show_proof_of_service: false,",
              "  show_updated_mto_shipment: false,",
              "};",
              "",
              "view.viewUpdatedAt = `${new Date()}`;",
              "",
              "if (pm.response.code >= 300) {",
              "  console.debug(response);",
              "  view.alertTitle     = 'Something went wrong';",
              "  view.alertType      = 'error';",
              "  view.errorMessage   = response.title;",
              "  view.errorDetail    = response.detail;",
              "  view.errorTraceId   = response.instance;",
              "}",
              "",
              "if (pmRequestID === 'moves') {",
              "  view.moves = true;",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle = 'List All Moves';",
              "    view.pageAction = 'Get All Moves';",
              "    view.alertType  = 'success';",
              "    view.movesList = response;",
              "  }",
              "",
              "}",
              "",
              "if (pmRequestID === 'move-task-orders') {",
              "  view.move_task_orders = true;",
              "",
              "  // If the Move is found, we'll update the view object appropriately.",
              "  if (pm.response.code === 200) {",
              "    view.customerFullName = response.order.customer.firstName.trim();",
              "    view.customerFullName += ' ';",
              "    view.customerFullName += response.order.customer.lastName.trim();",
              "",
              "    console.info('Setting customerFullName in the Collection Variables');",
              "    envSet('customerFullName', view.customerFullName);",
              "",
              "    view.moveCode = response.moveCode;",
              "    view.moveID = response.id;",
              "",
              "    console.info('Setting moveTaskOrderCode, moveTaskOrderID, moveTaskOrderETag in the Collection Variables');",
              "    envSet('moveTaskOrderCode', view.moveCode);",
              "    envSet('moveTaskOrderID', view.moveID);",
              "    envSet('moveTaskOrderETag', response.eTag);",
              "    envSet('mtoShipmentID', response.mtoShipments[0].id);",
              "    envSet('mtoShipmentETag', response.mtoShipments[0].eTag);",
              "    if (response.mtoShipments[0].reweigh) {",
              "      envSet('reweighID', response.mtoShipments[0].reweigh.id);",
              "      envSet('reweighETag', response.mtoShipments[0].reweigh.eTag);",
              "      view.show_reweigh = true;",
              "    }",
              "",
              "    if (view.show_reweigh) {",
              "      const reweigh = response.mtoShipments[0].reweigh;",
              "      if (reweigh.weight || reweigh.verificationReason) {",
              "        // reweigh requested and performed",
              "        view.alertTitle = 'Reweigh has been requested and completed';",
              "        view.alertType  = 'success';",
              "      } else {",
              "        // reweigh requested but not performed yet",
              "        view.alertTitle = 'Reweigh has been requested';",
              "        view.alertType  = 'warning';",
              "      }",
              "      view.reweigh_details = {",
              "        id: reweigh.id,",
              "        requestedAt: reweigh.requestedAt,",
              "        requestedBy: reweigh.requestedBy,",
              "        weight: reweigh.weight,",
              "        verificationReason: reweigh.verificationReason,",
              "        verificationProvidedAt: reweigh.verificationProvidedAt,",
              "      }",
              "    } else {",
              "      view.alertTitle = 'Move is now available to GHC Prime Contractor';",
              "      view.alertType  = 'success';",
              "    }",
              "",
              "    // prepare a payment request",
              "    const paymentRequest = {",
              "      isFinal: false,",
              "      moveTaskOrderID: view.moveID,",
              "      serviceItems: []",
              "    };",
              "    const serviceItemsToInvoice = envGet('serviceItemsToInvoice');",
              "    response.mtoServiceItems",
              "      .filter((serviceItem) => {",
              "        return serviceItemsToInvoice.includes(serviceItem.reServiceCode) && serviceItem.mtoShipmentID === response.mtoShipments[0].id;",
              "      })",
              "      .forEach((serviceItem) => {",
              "        console.info(serviceItem);",
              "        const si = { id: serviceItem.id };",
              "        if (serviceItem.reServiceCode === \"DDASIT\") {",
              "          si.params = [{",
              "",
              "            key: \"SITPaymentRequestStart\",",
              "            value: \"2021-09-01\",",
              "          },{",
              "            key: \"SITPaymentRequestEnd\",",
              "            value: \"2021-09-30\",",
              "          }];",
              "        }",
              "        paymentRequest.serviceItems.add(si);",
              "      });",
              "    envSet('paymentRequestPayload', JSON.stringify(paymentRequest, null, 2));",
              "    console.info(envGet('paymentRequestPayload'));",
              "  }",
              "",
              "  // If the Move is not found, we'll update the view object appropriately.",
              "  if (pm.response.code === 404) {",
              "    view.alertTitle   = 'Move is not available to GHC Prime Contractor';",
              "    view.alertType    = 'error';",
              "    view.moveCode     = undefHTML;",
              "    view.moveID       = undefHTML;",
              "    view.errorMessage = response.title;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-sit-mto-service-items') {",
              "  view.create_sit_mto_service_items = true;",
              "  view.pageAction = 'Create Destination SIT Service Items';",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle     = 'Destination SIT Service Items Created';",
              "    view.alertType      = 'success';",
              "    view.sitServiceItem = response;",
              "  } else {",
              "    view.alertTitle     = 'Destination SIT Service Items Create Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'mto-shipments-sit-extensions') {",
              "  view.mto_shipments_sit_extensions = true;",
              "",
              "  if (pm.response.code === 201) {",
              "    view.alertTitle = 'SIT Extension Created';",
              "    view.alertType  = 'success';",
              "    view.pageAction = 'Create SIT Extension';",
              "    view.sitExtension = response;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-payment-request') {",
              "  view.show_payment_request = true",
              "  view.pageAction = 'Payment Request Creation';",
              "  if (pm.response.code == 201) {",
              "    let total = 0;",
              "    view.alertTitle = 'Creation Succeeded';",
              "    view.alertType = 'success';",
              "    envSet('paymentRequestID', response.id);",
              "    view.paymentRequest = response;",
              "    view.paymentRequest.paymentServiceItems.forEach(psi => total += psi.priceCents);",
              "    total = total/100",
              "    view.paymentRequest.total = total;",
              "    view.paymentRequest.payload = request.data;",
              "  } else {",
              "    view.alertTitle = 'Creation Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'upload-proof-of-service') {",
              "  view.show_proof_of_service = true",
              "  view.pageAction = 'Proof of Service Upload';",
              "  if (pm.response.code == 201) {",
              "    view.alertTitle = 'Upload Succeeded';",
              "    view.alertType = 'success';",
              "    view.proofOfServiceDetails = response;",
              "  } else {",
              "    view.alertTitle = 'Upload Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// response from update-mto-shipment endpoint is shipment JSON with new eTag",
              "if (request.url.includes('/prime/v1/mto-shipments') && request.method === \"PATCH\") {",
              "  view.show_updated_mto_shipment = true",
              "  view.pageAction = 'Update Shipment';",
              "  if (pm.response.code == 200) {",
              "    envSet('mtoShipmentETag', response.eTag);",
              "    view.alertTitle = 'Update Succeeded';",
              "    view.alertType = 'success';",
              "    view.updatesMade = {};",
              "    Object.keys(JSON.parse(request.data)).forEach((key) => {",
              "      view.updatesMade[key] = response[key];",
              "    })",
              "  } else {",
              "    view.alertTitle = 'Update Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// Setup the visualization template.",
              "pm.visualizer.set(template, view);",
              ""
            ]
          }
        }
      ]
    },
    {
      "id": "update-mto-shipment-scheduled-date",
      "name": "Update the scheduled date on a shipment",
      "request": {
        "description": {
          "content": "\nThis Postman Request was created with the Postman SDK and not the Postman.app\nUI.\n\nThis endpoint Updates the shipment.\n\nThis Request uses the templates found in\n**templates/visualize.html**.\n",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "mto-shipments",
            "{{mtoShipmentID}}"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Postman-Request-ID",
            "value": "update-mto-shipment-scheduled-date"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "If-Match",
            "value": "{{mtoShipmentETag}}"
          }
        ],
        "method": "PATCH",
        "body": {
          "mode": "raw",
          "raw": "{\n  \"scheduledPickupDate\": \"2021-10-16\"\n}"
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "cfb41627-6121-45e6-8713-b207233f1ae9",
            "type": "text/javascript",
            "exec": [
              "// A helpful function that's less characters to type to get a Collection",
              "// Variable.",
              "function envGet(v) {",
              "  return pm.collectionVariables.get(v);",
              "}",
              "",
              "// A helpful function that's less characters to type to set a Collection",
              "// Variable.",
              "function envSet(k, v) {",
              "  pm.collectionVariables.set(k, v);",
              "}",
              "",
              "// A helpful map of relationships between request file names and titles.",
              "const requestIDToTitle = {",
              "  'move-task-orders': 'Get MoveTaskOrder By ID',",
              "  moves: 'Get All Moves',",
              "  'mto-shipments-sit-extensions': 'Create SIT Extension For Shipment ID',",
              "};",
              "",
              "// The response JSON that Postman created.",
              "const response = pm.response.json();",
              "",
              "// The custom header for Postman Request ID which is the filename of the",
              "// ./requests files.",
              "const pmRequestID = pm.request.getHeaders()['Postman-Request-ID'];",
              "",
              "// The template file that is set in example-get-move-task-orders/index.js that",
              "// references example-get-move-task-orders/templates/visualize.html",
              "const template = envGet('visualizeTemplate');",
              "",
              "// A helpful string that can be used to show \"undefined\" in the Visualize tab.",
              "const undefHTML = '<code>undefined</code>';",
              "",
              "// The view object that gets fed into the template file. These are base values",
              "// and will be modified in the next conditional checks around the status code.",
              "var view = {",
              "  viewUpdatedAt: '',",
              "  pageTitle: requestIDToTitle[pmRequestID],",
              "  pageHeading: 'GHC Contractor',",
              "  pageAction: 'Receives Moves information',",
              "  alertTitle: '',",
              "  alertType: '',",
              "  customerFullName: envGet('customerFullName'),",
              "  moveCode: envGet('moveCode'),",
              "  moveID: envGet('moveID'),",
              "  mtoShipmentID: envGet('mtoShipmentID'),",
              "  mtoShipmentETag: envGet('mtoShipmentETag'),",
              "  reweighID: envGet('reweighID'),",
              "  reweighETag: envGet('reweighETag'),",
              "  errorMessage: '',",
              "  errorDetail: '',",
              "  errorTraceId: '',",
              "  move_task_orders: false,",
              "  moves: false,",
              "  mto_shipments_sit_extensions: false,",
              "  show_reweigh: false,",
              "  show_payment_request: false,",
              "  show_proof_of_service: false,",
              "  show_updated_mto_shipment: false,",
              "};",
              "",
              "view.viewUpdatedAt = `${new Date()}`;",
              "",
              "if (pm.response.code >= 300) {",
              "  console.debug(response);",
              "  view.alertTitle     = 'Something went wrong';",
              "  view.alertType      = 'error';",
              "  view.errorMessage   = response.title;",
              "  view.errorDetail    = response.detail;",
              "  view.errorTraceId   = response.instance;",
              "}",
              "",
              "if (pmRequestID === 'moves') {",
              "  view.moves = true;",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle = 'List All Moves';",
              "    view.pageAction = 'Get All Moves';",
              "    view.alertType  = 'success';",
              "    view.movesList = response;",
              "  }",
              "",
              "}",
              "",
              "if (pmRequestID === 'move-task-orders') {",
              "  view.move_task_orders = true;",
              "",
              "  // If the Move is found, we'll update the view object appropriately.",
              "  if (pm.response.code === 200) {",
              "    view.customerFullName = response.order.customer.firstName.trim();",
              "    view.customerFullName += ' ';",
              "    view.customerFullName += response.order.customer.lastName.trim();",
              "",
              "    console.info('Setting customerFullName in the Collection Variables');",
              "    envSet('customerFullName', view.customerFullName);",
              "",
              "    view.moveCode = response.moveCode;",
              "    view.moveID = response.id;",
              "",
              "    console.info('Setting moveTaskOrderCode, moveTaskOrderID, moveTaskOrderETag in the Collection Variables');",
              "    envSet('moveTaskOrderCode', view.moveCode);",
              "    envSet('moveTaskOrderID', view.moveID);",
              "    envSet('moveTaskOrderETag', response.eTag);",
              "    envSet('mtoShipmentID', response.mtoShipments[0].id);",
              "    envSet('mtoShipmentETag', response.mtoShipments[0].eTag);",
              "    if (response.mtoShipments[0].reweigh) {",
              "      envSet('reweighID', response.mtoShipments[0].reweigh.id);",
              "      envSet('reweighETag', response.mtoShipments[0].reweigh.eTag);",
              "      view.show_reweigh = true;",
              "    }",
              "",
              "    if (view.show_reweigh) {",
              "      const reweigh = response.mtoShipments[0].reweigh;",
              "      if (reweigh.weight || reweigh.verificationReason) {",
              "        // reweigh requested and performed",
              "        view.alertTitle = 'Reweigh has been requested and completed';",
              "        view.alertType  = 'success';",
              "      } else {",
              "        // reweigh requested but not performed yet",
              "        view.alertTitle = 'Reweigh has been requested';",
              "        view.alertType  = 'warning';",
              "      }",
              "      view.reweigh_details = {",
              "        id: reweigh.id,",
              "        requestedAt: reweigh.requestedAt,",
              "        requestedBy: reweigh.requestedBy,",
              "        weight: reweigh.weight,",
              "        verificationReason: reweigh.verificationReason,",
              "        verificationProvidedAt: reweigh.verificationProvidedAt,",
              "      }",
              "    } else {",
              "      view.alertTitle = 'Move is now available to GHC Prime Contractor';",
              "      view.alertType  = 'success';",
              "    }",
              "",
              "    // prepare a payment request",
              "    const paymentRequest = {",
              "      isFinal: false,",
              "      moveTaskOrderID: view.moveID,",
              "      serviceItems: []",
              "    };",
              "    const serviceItemsToInvoice = envGet('serviceItemsToInvoice');",
              "    response.mtoServiceItems",
              "      .filter((serviceItem) => {",
              "        return serviceItemsToInvoice.includes(serviceItem.reServiceCode) && serviceItem.mtoShipmentID === response.mtoShipments[0].id;",
              "      })",
              "      .forEach((serviceItem) => {",
              "        console.info(serviceItem);",
              "        const si = { id: serviceItem.id };",
              "        if (serviceItem.reServiceCode === \"DDASIT\") {",
              "          si.params = [{",
              "",
              "            key: \"SITPaymentRequestStart\",",
              "            value: \"2021-09-01\",",
              "          },{",
              "            key: \"SITPaymentRequestEnd\",",
              "            value: \"2021-09-30\",",
              "          }];",
              "        }",
              "        paymentRequest.serviceItems.add(si);",
              "      });",
              "    envSet('paymentRequestPayload', JSON.stringify(paymentRequest, null, 2));",
              "    console.info(envGet('paymentRequestPayload'));",
              "  }",
              "",
              "  // If the Move is not found, we'll update the view object appropriately.",
              "  if (pm.response.code === 404) {",
              "    view.alertTitle   = 'Move is not available to GHC Prime Contractor';",
              "    view.alertType    = 'error';",
              "    view.moveCode     = undefHTML;",
              "    view.moveID       = undefHTML;",
              "    view.errorMessage = response.title;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-sit-mto-service-items') {",
              "  view.create_sit_mto_service_items = true;",
              "  view.pageAction = 'Create Destination SIT Service Items';",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle     = 'Destination SIT Service Items Created';",
              "    view.alertType      = 'success';",
              "    view.sitServiceItem = response;",
              "  } else {",
              "    view.alertTitle     = 'Destination SIT Service Items Create Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'mto-shipments-sit-extensions') {",
              "  view.mto_shipments_sit_extensions = true;",
              "",
              "  if (pm.response.code === 201) {",
              "    view.alertTitle = 'SIT Extension Created';",
              "    view.alertType  = 'success';",
              "    view.pageAction = 'Create SIT Extension';",
              "    view.sitExtension = response;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-payment-request') {",
              "  view.show_payment_request = true",
              "  view.pageAction = 'Payment Request Creation';",
              "  if (pm.response.code == 201) {",
              "    let total = 0;",
              "    view.alertTitle = 'Creation Succeeded';",
              "    view.alertType = 'success';",
              "    envSet('paymentRequestID', response.id);",
              "    view.paymentRequest = response;",
              "    view.paymentRequest.paymentServiceItems.forEach(psi => total += psi.priceCents);",
              "    total = total/100",
              "    view.paymentRequest.total = total;",
              "    view.paymentRequest.payload = request.data;",
              "  } else {",
              "    view.alertTitle = 'Creation Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'upload-proof-of-service') {",
              "  view.show_proof_of_service = true",
              "  view.pageAction = 'Proof of Service Upload';",
              "  if (pm.response.code == 201) {",
              "    view.alertTitle = 'Upload Succeeded';",
              "    view.alertType = 'success';",
              "    view.proofOfServiceDetails = response;",
              "  } else {",
              "    view.alertTitle = 'Upload Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// response from update-mto-shipment endpoint is shipment JSON with new eTag",
              "if (request.url.includes('/prime/v1/mto-shipments') && request.method === \"PATCH\") {",
              "  view.show_updated_mto_shipment = true",
              "  view.pageAction = 'Update Shipment';",
              "  if (pm.response.code == 200) {",
              "    envSet('mtoShipmentETag', response.eTag);",
              "    view.alertTitle = 'Update Succeeded';",
              "    view.alertType = 'success';",
              "    view.updatesMade = {};",
              "    Object.keys(JSON.parse(request.data)).forEach((key) => {",
              "      view.updatesMade[key] = response[key];",
              "    })",
              "  } else {",
              "    view.alertTitle = 'Update Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// Setup the visualization template.",
              "pm.visualizer.set(template, view);",
              ""
            ]
          }
        }
      ]
    },
    {
      "id": "update-mto-shipment-estimated-weight",
      "name": "Update the estimated weight on a shipment",
      "request": {
        "description": {
          "content": "\nThis Postman Request was created with the Postman SDK and not the Postman.app\nUI.\n\nThis endpoint Updates the shipment.\n\nThis Request uses the templates found in\n**templates/visualize.html**.\n",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "mto-shipments",
            "{{mtoShipmentID}}"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Postman-Request-ID",
            "value": "update-mto-shipment-estimated-weight"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "If-Match",
            "value": "{{mtoShipmentETag}}"
          }
        ],
        "method": "PATCH",
        "body": {
          "mode": "raw",
          "raw": "{\n  \"primeEstimatedWeight\": {{primeEstimatedWeight}}\n}"
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "64dad022-f9ce-4cfb-a5c8-52874ddbf9ff",
            "type": "text/javascript",
            "exec": [
              "// A helpful function that's less characters to type to get a Collection",
              "// Variable.",
              "function envGet(v) {",
              "  return pm.collectionVariables.get(v);",
              "}",
              "",
              "// A helpful function that's less characters to type to set a Collection",
              "// Variable.",
              "function envSet(k, v) {",
              "  pm.collectionVariables.set(k, v);",
              "}",
              "",
              "// A helpful map of relationships between request file names and titles.",
              "const requestIDToTitle = {",
              "  'move-task-orders': 'Get MoveTaskOrder By ID',",
              "  moves: 'Get All Moves',",
              "  'mto-shipments-sit-extensions': 'Create SIT Extension For Shipment ID',",
              "};",
              "",
              "// The response JSON that Postman created.",
              "const response = pm.response.json();",
              "",
              "// The custom header for Postman Request ID which is the filename of the",
              "// ./requests files.",
              "const pmRequestID = pm.request.getHeaders()['Postman-Request-ID'];",
              "",
              "// The template file that is set in example-get-move-task-orders/index.js that",
              "// references example-get-move-task-orders/templates/visualize.html",
              "const template = envGet('visualizeTemplate');",
              "",
              "// A helpful string that can be used to show \"undefined\" in the Visualize tab.",
              "const undefHTML = '<code>undefined</code>';",
              "",
              "// The view object that gets fed into the template file. These are base values",
              "// and will be modified in the next conditional checks around the status code.",
              "var view = {",
              "  viewUpdatedAt: '',",
              "  pageTitle: requestIDToTitle[pmRequestID],",
              "  pageHeading: 'GHC Contractor',",
              "  pageAction: 'Receives Moves information',",
              "  alertTitle: '',",
              "  alertType: '',",
              "  customerFullName: envGet('customerFullName'),",
              "  moveCode: envGet('moveCode'),",
              "  moveID: envGet('moveID'),",
              "  mtoShipmentID: envGet('mtoShipmentID'),",
              "  mtoShipmentETag: envGet('mtoShipmentETag'),",
              "  reweighID: envGet('reweighID'),",
              "  reweighETag: envGet('reweighETag'),",
              "  errorMessage: '',",
              "  errorDetail: '',",
              "  errorTraceId: '',",
              "  move_task_orders: false,",
              "  moves: false,",
              "  mto_shipments_sit_extensions: false,",
              "  show_reweigh: false,",
              "  show_payment_request: false,",
              "  show_proof_of_service: false,",
              "  show_updated_mto_shipment: false,",
              "};",
              "",
              "view.viewUpdatedAt = `${new Date()}`;",
              "",
              "if (pm.response.code >= 300) {",
              "  console.debug(response);",
              "  view.alertTitle     = 'Something went wrong';",
              "  view.alertType      = 'error';",
              "  view.errorMessage   = response.title;",
              "  view.errorDetail    = response.detail;",
              "  view.errorTraceId   = response.instance;",
              "}",
              "",
              "if (pmRequestID === 'moves') {",
              "  view.moves = true;",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle = 'List All Moves';",
              "    view.pageAction = 'Get All Moves';",
              "    view.alertType  = 'success';",
              "    view.movesList = response;",
              "  }",
              "",
              "}",
              "",
              "if (pmRequestID === 'move-task-orders') {",
              "  view.move_task_orders = true;",
              "",
              "  // If the Move is found, we'll update the view object appropriately.",
              "  if (pm.response.code === 200) {",
              "    view.customerFullName = response.order.customer.firstName.trim();",
              "    view.customerFullName += ' ';",
              "    view.customerFullName += response.order.customer.lastName.trim();",
              "",
              "    console.info('Setting customerFullName in the Collection Variables');",
              "    envSet('customerFullName', view.customerFullName);",
              "",
              "    view.moveCode = response.moveCode;",
              "    view.moveID = response.id;",
              "",
              "    console.info('Setting moveTaskOrderCode, moveTaskOrderID, moveTaskOrderETag in the Collection Variables');",
              "    envSet('moveTaskOrderCode', view.moveCode);",
              "    envSet('moveTaskOrderID', view.moveID);",
              "    envSet('moveTaskOrderETag', response.eTag);",
              "    envSet('mtoShipmentID', response.mtoShipments[0].id);",
              "    envSet('mtoShipmentETag', response.mtoShipments[0].eTag);",
              "    if (response.mtoShipments[0].reweigh) {",
              "      envSet('reweighID', response.mtoShipments[0].reweigh.id);",
              "      envSet('reweighETag', response.mtoShipments[0].reweigh.eTag);",
              "      view.show_reweigh = true;",
              "    }",
              "",
              "    if (view.show_reweigh) {",
              "      const reweigh = response.mtoShipments[0].reweigh;",
              "      if (reweigh.weight || reweigh.verificationReason) {",
              "        // reweigh requested and performed",
              "        view.alertTitle = 'Reweigh has been requested and completed';",
              "        view.alertType  = 'success';",
              "      } else {",
              "        // reweigh requested but not performed yet",
              "        view.alertTitle = 'Reweigh has been requested';",
              "        view.alertType  = 'warning';",
              "      }",
              "      view.reweigh_details = {",
              "        id: reweigh.id,",
              "        requestedAt: reweigh.requestedAt,",
              "        requestedBy: reweigh.requestedBy,",
              "        weight: reweigh.weight,",
              "        verificationReason: reweigh.verificationReason,",
              "        verificationProvidedAt: reweigh.verificationProvidedAt,",
              "      }",
              "    } else {",
              "      view.alertTitle = 'Move is now available to GHC Prime Contractor';",
              "      view.alertType  = 'success';",
              "    }",
              "",
              "    // prepare a payment request",
              "    const paymentRequest = {",
              "      isFinal: false,",
              "      moveTaskOrderID: view.moveID,",
              "      serviceItems: []",
              "    };",
              "    const serviceItemsToInvoice = envGet('serviceItemsToInvoice');",
              "    response.mtoServiceItems",
              "      .filter((serviceItem) => {",
              "        return serviceItemsToInvoice.includes(serviceItem.reServiceCode) && serviceItem.mtoShipmentID === response.mtoShipments[0].id;",
              "      })",
              "      .forEach((serviceItem) => {",
              "        console.info(serviceItem);",
              "        const si = { id: serviceItem.id };",
              "        if (serviceItem.reServiceCode === \"DDASIT\") {",
              "          si.params = [{",
              "",
              "            key: \"SITPaymentRequestStart\",",
              "            value: \"2021-09-01\",",
              "          },{",
              "            key: \"SITPaymentRequestEnd\",",
              "            value: \"2021-09-30\",",
              "          }];",
              "        }",
              "        paymentRequest.serviceItems.add(si);",
              "      });",
              "    envSet('paymentRequestPayload', JSON.stringify(paymentRequest, null, 2));",
              "    console.info(envGet('paymentRequestPayload'));",
              "  }",
              "",
              "  // If the Move is not found, we'll update the view object appropriately.",
              "  if (pm.response.code === 404) {",
              "    view.alertTitle   = 'Move is not available to GHC Prime Contractor';",
              "    view.alertType    = 'error';",
              "    view.moveCode     = undefHTML;",
              "    view.moveID       = undefHTML;",
              "    view.errorMessage = response.title;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-sit-mto-service-items') {",
              "  view.create_sit_mto_service_items = true;",
              "  view.pageAction = 'Create Destination SIT Service Items';",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle     = 'Destination SIT Service Items Created';",
              "    view.alertType      = 'success';",
              "    view.sitServiceItem = response;",
              "  } else {",
              "    view.alertTitle     = 'Destination SIT Service Items Create Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'mto-shipments-sit-extensions') {",
              "  view.mto_shipments_sit_extensions = true;",
              "",
              "  if (pm.response.code === 201) {",
              "    view.alertTitle = 'SIT Extension Created';",
              "    view.alertType  = 'success';",
              "    view.pageAction = 'Create SIT Extension';",
              "    view.sitExtension = response;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-payment-request') {",
              "  view.show_payment_request = true",
              "  view.pageAction = 'Payment Request Creation';",
              "  if (pm.response.code == 201) {",
              "    let total = 0;",
              "    view.alertTitle = 'Creation Succeeded';",
              "    view.alertType = 'success';",
              "    envSet('paymentRequestID', response.id);",
              "    view.paymentRequest = response;",
              "    view.paymentRequest.paymentServiceItems.forEach(psi => total += psi.priceCents);",
              "    total = total/100",
              "    view.paymentRequest.total = total;",
              "    view.paymentRequest.payload = request.data;",
              "  } else {",
              "    view.alertTitle = 'Creation Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'upload-proof-of-service') {",
              "  view.show_proof_of_service = true",
              "  view.pageAction = 'Proof of Service Upload';",
              "  if (pm.response.code == 201) {",
              "    view.alertTitle = 'Upload Succeeded';",
              "    view.alertType = 'success';",
              "    view.proofOfServiceDetails = response;",
              "  } else {",
              "    view.alertTitle = 'Upload Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// response from update-mto-shipment endpoint is shipment JSON with new eTag",
              "if (request.url.includes('/prime/v1/mto-shipments') && request.method === \"PATCH\") {",
              "  view.show_updated_mto_shipment = true",
              "  view.pageAction = 'Update Shipment';",
              "  if (pm.response.code == 200) {",
              "    envSet('mtoShipmentETag', response.eTag);",
              "    view.alertTitle = 'Update Succeeded';",
              "    view.alertType = 'success';",
              "    view.updatesMade = {};",
              "    Object.keys(JSON.parse(request.data)).forEach((key) => {",
              "      view.updatesMade[key] = response[key];",
              "    })",
              "  } else {",
              "    view.alertTitle = 'Update Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// Setup the visualization template.",
              "pm.visualizer.set(template, view);",
              ""
            ]
          }
        }
      ]
    },
    {
      "id": "update-mto-shipment-actual-weight",
      "name": "Update the actual weight on a shipment",
      "request": {
        "description": {
          "content": "\nThis Postman Request was created with the Postman SDK and not the Postman.app\nUI.\n\nThis endpoint Updates the shipment.\n\nThis Request uses the templates found in\n**templates/visualize.html**.\n",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "mto-shipments",
            "{{mtoShipmentID}}"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Postman-Request-ID",
            "value": "update-mto-shipment-actual-weight"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "If-Match",
            "value": "{{mtoShipmentETag}}"
          }
        ],
        "method": "PATCH",
        "body": {
          "mode": "raw",
          "raw": "{\n  \"actualPickupDate\": \"2021-10-13\",\n  \"primeActualWeight\": {{primeActualWeight}}\n}"
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "721d8ef9-3609-4e35-9abc-b9d1ef96f22c",
            "type": "text/javascript",
            "exec": [
              "// A helpful function that's less characters to type to get a Collection",
              "// Variable.",
              "function envGet(v) {",
              "  return pm.collectionVariables.get(v);",
              "}",
              "",
              "// A helpful function that's less characters to type to set a Collection",
              "// Variable.",
              "function envSet(k, v) {",
              "  pm.collectionVariables.set(k, v);",
              "}",
              "",
              "// A helpful map of relationships between request file names and titles.",
              "const requestIDToTitle = {",
              "  'move-task-orders': 'Get MoveTaskOrder By ID',",
              "  moves: 'Get All Moves',",
              "  'mto-shipments-sit-extensions': 'Create SIT Extension For Shipment ID',",
              "};",
              "",
              "// The response JSON that Postman created.",
              "const response = pm.response.json();",
              "",
              "// The custom header for Postman Request ID which is the filename of the",
              "// ./requests files.",
              "const pmRequestID = pm.request.getHeaders()['Postman-Request-ID'];",
              "",
              "// The template file that is set in example-get-move-task-orders/index.js that",
              "// references example-get-move-task-orders/templates/visualize.html",
              "const template = envGet('visualizeTemplate');",
              "",
              "// A helpful string that can be used to show \"undefined\" in the Visualize tab.",
              "const undefHTML = '<code>undefined</code>';",
              "",
              "// The view object that gets fed into the template file. These are base values",
              "// and will be modified in the next conditional checks around the status code.",
              "var view = {",
              "  viewUpdatedAt: '',",
              "  pageTitle: requestIDToTitle[pmRequestID],",
              "  pageHeading: 'GHC Contractor',",
              "  pageAction: 'Receives Moves information',",
              "  alertTitle: '',",
              "  alertType: '',",
              "  customerFullName: envGet('customerFullName'),",
              "  moveCode: envGet('moveCode'),",
              "  moveID: envGet('moveID'),",
              "  mtoShipmentID: envGet('mtoShipmentID'),",
              "  mtoShipmentETag: envGet('mtoShipmentETag'),",
              "  reweighID: envGet('reweighID'),",
              "  reweighETag: envGet('reweighETag'),",
              "  errorMessage: '',",
              "  errorDetail: '',",
              "  errorTraceId: '',",
              "  move_task_orders: false,",
              "  moves: false,",
              "  mto_shipments_sit_extensions: false,",
              "  show_reweigh: false,",
              "  show_payment_request: false,",
              "  show_proof_of_service: false,",
              "  show_updated_mto_shipment: false,",
              "};",
              "",
              "view.viewUpdatedAt = `${new Date()}`;",
              "",
              "if (pm.response.code >= 300) {",
              "  console.debug(response);",
              "  view.alertTitle     = 'Something went wrong';",
              "  view.alertType      = 'error';",
              "  view.errorMessage   = response.title;",
              "  view.errorDetail    = response.detail;",
              "  view.errorTraceId   = response.instance;",
              "}",
              "",
              "if (pmRequestID === 'moves') {",
              "  view.moves = true;",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle = 'List All Moves';",
              "    view.pageAction = 'Get All Moves';",
              "    view.alertType  = 'success';",
              "    view.movesList = response;",
              "  }",
              "",
              "}",
              "",
              "if (pmRequestID === 'move-task-orders') {",
              "  view.move_task_orders = true;",
              "",
              "  // If the Move is found, we'll update the view object appropriately.",
              "  if (pm.response.code === 200) {",
              "    view.customerFullName = response.order.customer.firstName.trim();",
              "    view.customerFullName += ' ';",
              "    view.customerFullName += response.order.customer.lastName.trim();",
              "",
              "    console.info('Setting customerFullName in the Collection Variables');",
              "    envSet('customerFullName', view.customerFullName);",
              "",
              "    view.moveCode = response.moveCode;",
              "    view.moveID = response.id;",
              "",
              "    console.info('Setting moveTaskOrderCode, moveTaskOrderID, moveTaskOrderETag in the Collection Variables');",
              "    envSet('moveTaskOrderCode', view.moveCode);",
              "    envSet('moveTaskOrderID', view.moveID);",
              "    envSet('moveTaskOrderETag', response.eTag);",
              "    envSet('mtoShipmentID', response.mtoShipments[0].id);",
              "    envSet('mtoShipmentETag', response.mtoShipments[0].eTag);",
              "    if (response.mtoShipments[0].reweigh) {",
              "      envSet('reweighID', response.mtoShipments[0].reweigh.id);",
              "      envSet('reweighETag', response.mtoShipments[0].reweigh.eTag);",
              "      view.show_reweigh = true;",
              "    }",
              "",
              "    if (view.show_reweigh) {",
              "      const reweigh = response.mtoShipments[0].reweigh;",
              "      if (reweigh.weight || reweigh.verificationReason) {",
              "        // reweigh requested and performed",
              "        view.alertTitle = 'Reweigh has been requested and completed';",
              "        view.alertType  = 'success';",
              "      } else {",
              "        // reweigh requested but not performed yet",
              "        view.alertTitle = 'Reweigh has been requested';",
              "        view.alertType  = 'warning';",
              "      }",
              "      view.reweigh_details = {",
              "        id: reweigh.id,",
              "        requestedAt: reweigh.requestedAt,",
              "        requestedBy: reweigh.requestedBy,",
              "        weight: reweigh.weight,",
              "        verificationReason: reweigh.verificationReason,",
              "        verificationProvidedAt: reweigh.verificationProvidedAt,",
              "      }",
              "    } else {",
              "      view.alertTitle = 'Move is now available to GHC Prime Contractor';",
              "      view.alertType  = 'success';",
              "    }",
              "",
              "    // prepare a payment request",
              "    const paymentRequest = {",
              "      isFinal: false,",
              "      moveTaskOrderID: view.moveID,",
              "      serviceItems: []",
              "    };",
              "    const serviceItemsToInvoice = envGet('serviceItemsToInvoice');",
              "    response.mtoServiceItems",
              "      .filter((serviceItem) => {",
              "        return serviceItemsToInvoice.includes(serviceItem.reServiceCode) && serviceItem.mtoShipmentID === response.mtoShipments[0].id;",
              "      })",
              "      .forEach((serviceItem) => {",
              "        console.info(serviceItem);",
              "        const si = { id: serviceItem.id };",
              "        if (serviceItem.reServiceCode === \"DDASIT\") {",
              "          si.params = [{",
              "",
              "            key: \"SITPaymentRequestStart\",",
              "            value: \"2021-09-01\",",
              "          },{",
              "            key: \"SITPaymentRequestEnd\",",
              "            value: \"2021-09-30\",",
              "          }];",
              "        }",
              "        paymentRequest.serviceItems.add(si);",
              "      });",
              "    envSet('paymentRequestPayload', JSON.stringify(paymentRequest, null, 2));",
              "    console.info(envGet('paymentRequestPayload'));",
              "  }",
              "",
              "  // If the Move is not found, we'll update the view object appropriately.",
              "  if (pm.response.code === 404) {",
              "    view.alertTitle   = 'Move is not available to GHC Prime Contractor';",
              "    view.alertType    = 'error';",
              "    view.moveCode     = undefHTML;",
              "    view.moveID       = undefHTML;",
              "    view.errorMessage = response.title;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-sit-mto-service-items') {",
              "  view.create_sit_mto_service_items = true;",
              "  view.pageAction = 'Create Destination SIT Service Items';",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle     = 'Destination SIT Service Items Created';",
              "    view.alertType      = 'success';",
              "    view.sitServiceItem = response;",
              "  } else {",
              "    view.alertTitle     = 'Destination SIT Service Items Create Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'mto-shipments-sit-extensions') {",
              "  view.mto_shipments_sit_extensions = true;",
              "",
              "  if (pm.response.code === 201) {",
              "    view.alertTitle = 'SIT Extension Created';",
              "    view.alertType  = 'success';",
              "    view.pageAction = 'Create SIT Extension';",
              "    view.sitExtension = response;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-payment-request') {",
              "  view.show_payment_request = true",
              "  view.pageAction = 'Payment Request Creation';",
              "  if (pm.response.code == 201) {",
              "    let total = 0;",
              "    view.alertTitle = 'Creation Succeeded';",
              "    view.alertType = 'success';",
              "    envSet('paymentRequestID', response.id);",
              "    view.paymentRequest = response;",
              "    view.paymentRequest.paymentServiceItems.forEach(psi => total += psi.priceCents);",
              "    total = total/100",
              "    view.paymentRequest.total = total;",
              "    view.paymentRequest.payload = request.data;",
              "  } else {",
              "    view.alertTitle = 'Creation Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'upload-proof-of-service') {",
              "  view.show_proof_of_service = true",
              "  view.pageAction = 'Proof of Service Upload';",
              "  if (pm.response.code == 201) {",
              "    view.alertTitle = 'Upload Succeeded';",
              "    view.alertType = 'success';",
              "    view.proofOfServiceDetails = response;",
              "  } else {",
              "    view.alertTitle = 'Upload Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// response from update-mto-shipment endpoint is shipment JSON with new eTag",
              "if (request.url.includes('/prime/v1/mto-shipments') && request.method === \"PATCH\") {",
              "  view.show_updated_mto_shipment = true",
              "  view.pageAction = 'Update Shipment';",
              "  if (pm.response.code == 200) {",
              "    envSet('mtoShipmentETag', response.eTag);",
              "    view.alertTitle = 'Update Succeeded';",
              "    view.alertType = 'success';",
              "    view.updatesMade = {};",
              "    Object.keys(JSON.parse(request.data)).forEach((key) => {",
              "      view.updatesMade[key] = response[key];",
              "    })",
              "  } else {",
              "    view.alertTitle = 'Update Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// Setup the visualization template.",
              "pm.visualizer.set(template, view);",
              ""
            ]
          }
        }
      ]
    },
    {
      "id": "fe8dfe1b-2c04-4e93-b7b9-c86e80975f4f",
      "name": "Update the destination address on a shipment",
      "request": {
        "description": {
          "content": "\nThis Postman Request was created with the Postman SDK and not the Postman.app\nUI.\n\nThis endpoint Updates the shipment.\n\nThis Request uses the templates found in\n**templates/visualize.html**.\n",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "mto-shipments",
            "{{mtoShipmentID}}"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "If-Match",
            "value": "{{mtoShipmentETag}}"
          }
        ],
        "method": "PATCH",
        "body": {
          "mode": "raw",
          "raw": "{\n  \"destinationAddress\": {\n    \"streetAddress1\": \"7 Q Street\",\n    \"city\": \"Corpus Christi\",\n    \"state\": \"TX\",\n    \"postalCode\": \"78412\",\n    \"country\": \"US\"\n  }\n}"
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "25a8e5be-4f18-4479-bb61-6dcbd6b7b78b",
            "type": "text/javascript",
            "exec": [
              "// A helpful function that's less characters to type to get a Collection",
              "// Variable.",
              "function envGet(v) {",
              "  return pm.collectionVariables.get(v);",
              "}",
              "",
              "// A helpful function that's less characters to type to set a Collection",
              "// Variable.",
              "function envSet(k, v) {",
              "  pm.collectionVariables.set(k, v);",
              "}",
              "",
              "// A helpful map of relationships between request file names and titles.",
              "const requestIDToTitle = {",
              "  'move-task-orders': 'Get MoveTaskOrder By ID',",
              "  moves: 'Get All Moves',",
              "  'mto-shipments-sit-extensions': 'Create SIT Extension For Shipment ID',",
              "};",
              "",
              "// The response JSON that Postman created.",
              "const response = pm.response.json();",
              "",
              "// The custom header for Postman Request ID which is the filename of the",
              "// ./requests files.",
              "const pmRequestID = pm.request.getHeaders()['Postman-Request-ID'];",
              "",
              "// The template file that is set in example-get-move-task-orders/index.js that",
              "// references example-get-move-task-orders/templates/visualize.html",
              "const template = envGet('visualizeTemplate');",
              "",
              "// A helpful string that can be used to show \"undefined\" in the Visualize tab.",
              "const undefHTML = '<code>undefined</code>';",
              "",
              "// The view object that gets fed into the template file. These are base values",
              "// and will be modified in the next conditional checks around the status code.",
              "var view = {",
              "  viewUpdatedAt: '',",
              "  pageTitle: requestIDToTitle[pmRequestID],",
              "  pageHeading: 'GHC Contractor',",
              "  pageAction: 'Receives Moves information',",
              "  alertTitle: '',",
              "  alertType: '',",
              "  customerFullName: envGet('customerFullName'),",
              "  moveCode: envGet('moveCode'),",
              "  moveID: envGet('moveID'),",
              "  mtoShipmentID: envGet('mtoShipmentID'),",
              "  mtoShipmentETag: envGet('mtoShipmentETag'),",
              "  reweighID: envGet('reweighID'),",
              "  reweighETag: envGet('reweighETag'),",
              "  errorMessage: '',",
              "  errorDetail: '',",
              "  errorTraceId: '',",
              "  move_task_orders: false,",
              "  moves: false,",
              "  mto_shipments_sit_extensions: false,",
              "  show_reweigh: false,",
              "  show_payment_request: false,",
              "  show_proof_of_service: false,",
              "  show_updated_mto_shipment: false,",
              "};",
              "",
              "view.viewUpdatedAt = `${new Date()}`;",
              "",
              "if (pm.response.code >= 300) {",
              "  console.debug(response);",
              "  view.alertTitle     = 'Something went wrong';",
              "  view.alertType      = 'error';",
              "  view.errorMessage   = response.title;",
              "  view.errorDetail    = response.detail;",
              "  view.errorTraceId   = response.instance;",
              "}",
              "",
              "if (pmRequestID === 'moves') {",
              "  view.moves = true;",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle = 'List All Moves';",
              "    view.pageAction = 'Get All Moves';",
              "    view.alertType  = 'success';",
              "    view.movesList = response;",
              "  }",
              "",
              "}",
              "",
              "if (pmRequestID === 'move-task-orders') {",
              "  view.move_task_orders = true;",
              "",
              "  // If the Move is found, we'll update the view object appropriately.",
              "  if (pm.response.code === 200) {",
              "    view.customerFullName = response.order.customer.firstName.trim();",
              "    view.customerFullName += ' ';",
              "    view.customerFullName += response.order.customer.lastName.trim();",
              "",
              "    console.info('Setting customerFullName in the Collection Variables');",
              "    envSet('customerFullName', view.customerFullName);",
              "",
              "    view.moveCode = response.moveCode;",
              "    view.moveID = response.id;",
              "",
              "    console.info('Setting moveTaskOrderCode, moveTaskOrderID, moveTaskOrderETag in the Collection Variables');",
              "    envSet('moveTaskOrderCode', view.moveCode);",
              "    envSet('moveTaskOrderID', view.moveID);",
              "    envSet('moveTaskOrderETag', response.eTag);",
              "    envSet('mtoShipmentID', response.mtoShipments[0].id);",
              "    envSet('mtoShipmentETag', response.mtoShipments[0].eTag);",
              "    if (response.mtoShipments[0].reweigh) {",
              "      envSet('reweighID', response.mtoShipments[0].reweigh.id);",
              "      envSet('reweighETag', response.mtoShipments[0].reweigh.eTag);",
              "      view.show_reweigh = true;",
              "    }",
              "",
              "    if (view.show_reweigh) {",
              "      const reweigh = response.mtoShipments[0].reweigh;",
              "      if (reweigh.weight || reweigh.verificationReason) {",
              "        // reweigh requested and performed",
              "        view.alertTitle = 'Reweigh has been requested and completed';",
              "        view.alertType  = 'success';",
              "      } else {",
              "        // reweigh requested but not performed yet",
              "        view.alertTitle = 'Reweigh has been requested';",
              "        view.alertType  = 'warning';",
              "      }",
              "      view.reweigh_details = {",
              "        id: reweigh.id,",
              "        requestedAt: reweigh.requestedAt,",
              "        requestedBy: reweigh.requestedBy,",
              "        weight: reweigh.weight,",
              "        verificationReason: reweigh.verificationReason,",
              "        verificationProvidedAt: reweigh.verificationProvidedAt,",
              "      }",
              "    } else {",
              "      view.alertTitle = 'Move is now available to GHC Prime Contractor';",
              "      view.alertType  = 'success';",
              "    }",
              "",
              "    // prepare a payment request",
              "    const paymentRequest = {",
              "      isFinal: false,",
              "      moveTaskOrderID: view.moveID,",
              "      serviceItems: []",
              "    };",
              "    const serviceItemsToInvoice = envGet('serviceItemsToInvoice');",
              "    response.mtoServiceItems",
              "      .filter((serviceItem) => {",
              "        return serviceItemsToInvoice.includes(serviceItem.reServiceCode) && serviceItem.mtoShipmentID === response.mtoShipments[0].id;",
              "      })",
              "      .forEach((serviceItem) => {",
              "        console.info(serviceItem);",
              "        const si = { id: serviceItem.id };",
              "        if (serviceItem.reServiceCode === \"DDASIT\") {",
              "          si.params = [{",
              "",
              "            key: \"SITPaymentRequestStart\",",
              "            value: \"2021-09-01\",",
              "          },{",
              "            key: \"SITPaymentRequestEnd\",",
              "            value: \"2021-09-30\",",
              "          }];",
              "        }",
              "        paymentRequest.serviceItems.add(si);",
              "      });",
              "    envSet('paymentRequestPayload', JSON.stringify(paymentRequest, null, 2));",
              "    console.info(envGet('paymentRequestPayload'));",
              "  }",
              "",
              "  // If the Move is not found, we'll update the view object appropriately.",
              "  if (pm.response.code === 404) {",
              "    view.alertTitle   = 'Move is not available to GHC Prime Contractor';",
              "    view.alertType    = 'error';",
              "    view.moveCode     = undefHTML;",
              "    view.moveID       = undefHTML;",
              "    view.errorMessage = response.title;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-sit-mto-service-items') {",
              "  view.create_sit_mto_service_items = true;",
              "  view.pageAction = 'Create Destination SIT Service Items';",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle     = 'Destination SIT Service Items Created';",
              "    view.alertType      = 'success';",
              "    view.sitServiceItem = response;",
              "  } else {",
              "    view.alertTitle     = 'Destination SIT Service Items Create Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'mto-shipments-sit-extensions') {",
              "  view.mto_shipments_sit_extensions = true;",
              "",
              "  if (pm.response.code === 201) {",
              "    view.alertTitle = 'SIT Extension Created';",
              "    view.alertType  = 'success';",
              "    view.pageAction = 'Create SIT Extension';",
              "    view.sitExtension = response;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-payment-request') {",
              "  view.show_payment_request = true",
              "  view.pageAction = 'Payment Request Creation';",
              "  if (pm.response.code == 201) {",
              "    let total = 0;",
              "    view.alertTitle = 'Creation Succeeded';",
              "    view.alertType = 'success';",
              "    envSet('paymentRequestID', response.id);",
              "    view.paymentRequest = response;",
              "    view.paymentRequest.paymentServiceItems.forEach(psi => total += psi.priceCents);",
              "    total = total/100",
              "    view.paymentRequest.total = total;",
              "    view.paymentRequest.payload = request.data;",
              "  } else {",
              "    view.alertTitle = 'Creation Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'upload-proof-of-service') {",
              "  view.show_proof_of_service = true",
              "  view.pageAction = 'Proof of Service Upload';",
              "  if (pm.response.code == 201) {",
              "    view.alertTitle = 'Upload Succeeded';",
              "    view.alertType = 'success';",
              "    view.proofOfServiceDetails = response;",
              "  } else {",
              "    view.alertTitle = 'Upload Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// response from update-mto-shipment endpoint is shipment JSON with new eTag",
              "if (request.url.includes('/prime/v1/mto-shipments') && request.method === \"PATCH\") {",
              "  view.show_updated_mto_shipment = true",
              "  view.pageAction = 'Update Shipment';",
              "  if (pm.response.code == 200) {",
              "    envSet('mtoShipmentETag', response.eTag);",
              "    view.alertTitle = 'Update Succeeded';",
              "    view.alertType = 'success';",
              "    view.updatesMade = {};",
              "    Object.keys(JSON.parse(request.data)).forEach((key) => {",
              "      view.updatesMade[key] = response[key];",
              "    })",
              "  } else {",
              "    view.alertTitle = 'Update Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// Setup the visualization template.",
              "pm.visualizer.set(template, view);",
              ""
            ]
          }
        }
      ]
    },
    {
      "id": "create-payment-request",
      "name": "Create Payment Request",
      "request": {
        "description": {
          "content": "\nThis Postman Request was created with the Postman SDK and not the Postman.app\nUI.\n\nThis Request uses the templates found in\n**templates/visualize.html**.\n",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "payment-requests"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Postman-Request-ID",
            "value": "create-payment-request"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "body": {
          "mode": "raw",
          "raw": "{{paymentRequestPayload}}"
        }
      },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "69f5bb8c-a011-41cb-9afc-cc08633de991",
            "type": "text/javascript",
            "exec": [
              "function envGet(v) {",
              "  return pm.collectionVariables.get(v);",
              "}",
              "",
              "function envSet(k, v) {",
              "  pm.collectionVariables.set(k, v);",
              "}",
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "8d5235a0-976a-4fc1-81cd-e123ff22287f",
            "type": "text/javascript",
            "exec": [
              "// A helpful function that's less characters to type to get a Collection",
              "// Variable.",
              "function envGet(v) {",
              "  return pm.collectionVariables.get(v);",
              "}",
              "",
              "// A helpful function that's less characters to type to set a Collection",
              "// Variable.",
              "function envSet(k, v) {",
              "  pm.collectionVariables.set(k, v);",
              "}",
              "",
              "// A helpful map of relationships between request file names and titles.",
              "const requestIDToTitle = {",
              "  'move-task-orders': 'Get MoveTaskOrder By ID',",
              "  moves: 'Get All Moves',",
              "  'mto-shipments-sit-extensions': 'Create SIT Extension For Shipment ID',",
              "};",
              "",
              "// The response JSON that Postman created.",
              "const response = pm.response.json();",
              "",
              "// The custom header for Postman Request ID which is the filename of the",
              "// ./requests files.",
              "const pmRequestID = pm.request.getHeaders()['Postman-Request-ID'];",
              "",
              "// The template file that is set in example-get-move-task-orders/index.js that",
              "// references example-get-move-task-orders/templates/visualize.html",
              "const template = envGet('visualizeTemplate');",
              "",
              "// A helpful string that can be used to show \"undefined\" in the Visualize tab.",
              "const undefHTML = '<code>undefined</code>';",
              "",
              "// The view object that gets fed into the template file. These are base values",
              "// and will be modified in the next conditional checks around the status code.",
              "var view = {",
              "  viewUpdatedAt: '',",
              "  pageTitle: requestIDToTitle[pmRequestID],",
              "  pageHeading: 'GHC Contractor',",
              "  pageAction: 'Receives Moves information',",
              "  alertTitle: '',",
              "  alertType: '',",
              "  customerFullName: envGet('customerFullName'),",
              "  moveCode: envGet('moveCode'),",
              "  moveID: envGet('moveID'),",
              "  mtoShipmentID: envGet('mtoShipmentID'),",
              "  mtoShipmentETag: envGet('mtoShipmentETag'),",
              "  reweighID: envGet('reweighID'),",
              "  reweighETag: envGet('reweighETag'),",
              "  errorMessage: '',",
              "  errorDetail: '',",
              "  errorTraceId: '',",
              "  move_task_orders: false,",
              "  moves: false,",
              "  mto_shipments_sit_extensions: false,",
              "  show_reweigh: false,",
              "  show_payment_request: false,",
              "  show_proof_of_service: false,",
              "  show_updated_mto_shipment: false,",
              "};",
              "",
              "view.viewUpdatedAt = `${new Date()}`;",
              "",
              "if (pm.response.code >= 300) {",
              "  console.debug(response);",
              "  view.alertTitle     = 'Something went wrong';",
              "  view.alertType      = 'error';",
              "  view.errorMessage   = response.title;",
              "  view.errorDetail    = response.detail;",
              "  view.errorTraceId   = response.instance;",
              "}",
              "",
              "if (pmRequestID === 'moves') {",
              "  view.moves = true;",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle = 'List All Moves';",
              "    view.pageAction = 'Get All Moves';",
              "    view.alertType  = 'success';",
              "    view.movesList = response;",
              "  }",
              "",
              "}",
              "",
              "if (pmRequestID === 'move-task-orders') {",
              "  view.move_task_orders = true;",
              "",
              "  // If the Move is found, we'll update the view object appropriately.",
              "  if (pm.response.code === 200) {",
              "    view.customerFullName = response.order.customer.firstName.trim();",
              "    view.customerFullName += ' ';",
              "    view.customerFullName += response.order.customer.lastName.trim();",
              "",
              "    console.info('Setting customerFullName in the Collection Variables');",
              "    envSet('customerFullName', view.customerFullName);",
              "",
              "    view.moveCode = response.moveCode;",
              "    view.moveID = response.id;",
              "",
              "    console.info('Setting moveTaskOrderCode, moveTaskOrderID, moveTaskOrderETag in the Collection Variables');",
              "    envSet('moveTaskOrderCode', view.moveCode);",
              "    envSet('moveTaskOrderID', view.moveID);",
              "    envSet('moveTaskOrderETag', response.eTag);",
              "    envSet('mtoShipmentID', response.mtoShipments[0].id);",
              "    envSet('mtoShipmentETag', response.mtoShipments[0].eTag);",
              "    if (response.mtoShipments[0].reweigh) {",
              "      envSet('reweighID', response.mtoShipments[0].reweigh.id);",
              "      envSet('reweighETag', response.mtoShipments[0].reweigh.eTag);",
              "      view.show_reweigh = true;",
              "    }",
              "",
              "    if (view.show_reweigh) {",
              "      const reweigh = response.mtoShipments[0].reweigh;",
              "      if (reweigh.weight || reweigh.verificationReason) {",
              "        // reweigh requested and performed",
              "        view.alertTitle = 'Reweigh has been requested and completed';",
              "        view.alertType  = 'success';",
              "      } else {",
              "        // reweigh requested but not performed yet",
              "        view.alertTitle = 'Reweigh has been requested';",
              "        view.alertType  = 'warning';",
              "      }",
              "      view.reweigh_details = {",
              "        id: reweigh.id,",
              "        requestedAt: reweigh.requestedAt,",
              "        requestedBy: reweigh.requestedBy,",
              "        weight: reweigh.weight,",
              "        verificationReason: reweigh.verificationReason,",
              "        verificationProvidedAt: reweigh.verificationProvidedAt,",
              "      }",
              "    } else {",
              "      view.alertTitle = 'Move is now available to GHC Prime Contractor';",
              "      view.alertType  = 'success';",
              "    }",
              "",
              "    // prepare a payment request",
              "    const paymentRequest = {",
              "      isFinal: false,",
              "      moveTaskOrderID: view.moveID,",
              "      serviceItems: []",
              "    };",
              "    const serviceItemsToInvoice = envGet('serviceItemsToInvoice');",
              "    response.mtoServiceItems",
              "      .filter((serviceItem) => {",
              "        return serviceItemsToInvoice.includes(serviceItem.reServiceCode) && serviceItem.mtoShipmentID === response.mtoShipments[0].id;",
              "      })",
              "      .forEach((serviceItem) => {",
              "        console.info(serviceItem);",
              "        const si = { id: serviceItem.id };",
              "        if (serviceItem.reServiceCode === \"DDASIT\") {",
              "          si.params = [{",
              "",
              "            key: \"SITPaymentRequestStart\",",
              "            value: \"2021-09-01\",",
              "          },{",
              "            key: \"SITPaymentRequestEnd\",",
              "            value: \"2021-09-30\",",
              "          }];",
              "        }",
              "        paymentRequest.serviceItems.add(si);",
              "      });",
              "    envSet('paymentRequestPayload', JSON.stringify(paymentRequest, null, 2));",
              "    console.info(envGet('paymentRequestPayload'));",
              "  }",
              "",
              "  // If the Move is not found, we'll update the view object appropriately.",
              "  if (pm.response.code === 404) {",
              "    view.alertTitle   = 'Move is not available to GHC Prime Contractor';",
              "    view.alertType    = 'error';",
              "    view.moveCode     = undefHTML;",
              "    view.moveID       = undefHTML;",
              "    view.errorMessage = response.title;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-sit-mto-service-items') {",
              "  view.create_sit_mto_service_items = true;",
              "  view.pageAction = 'Create Destination SIT Service Items';",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle     = 'Destination SIT Service Items Created';",
              "    view.alertType      = 'success';",
              "    view.sitServiceItem = response;",
              "  } else {",
              "    view.alertTitle     = 'Destination SIT Service Items Create Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'mto-shipments-sit-extensions') {",
              "  view.mto_shipments_sit_extensions = true;",
              "",
              "  if (pm.response.code === 201) {",
              "    view.alertTitle = 'SIT Extension Created';",
              "    view.alertType  = 'success';",
              "    view.pageAction = 'Create SIT Extension';",
              "    view.sitExtension = response;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-payment-request') {",
              "  view.show_payment_request = true",
              "  view.pageAction = 'Payment Request Creation';",
              "  if (pm.response.code == 201) {",
              "    let total = 0;",
              "    view.alertTitle = 'Creation Succeeded';",
              "    view.alertType = 'success';",
              "    envSet('paymentRequestID', response.id);",
              "    view.paymentRequest = response;",
              "    view.paymentRequest.paymentServiceItems.forEach(psi => total += psi.priceCents);",
              "    total = total/100",
              "    view.paymentRequest.total = total;",
              "    view.paymentRequest.payload = request.data;",
              "  } else {",
              "    view.alertTitle = 'Creation Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'upload-proof-of-service') {",
              "  view.show_proof_of_service = true",
              "  view.pageAction = 'Proof of Service Upload';",
              "  if (pm.response.code == 201) {",
              "    view.alertTitle = 'Upload Succeeded';",
              "    view.alertType = 'success';",
              "    view.proofOfServiceDetails = response;",
              "  } else {",
              "    view.alertTitle = 'Upload Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// response from update-mto-shipment endpoint is shipment JSON with new eTag",
              "if (request.url.includes('/prime/v1/mto-shipments') && request.method === \"PATCH\") {",
              "  view.show_updated_mto_shipment = true",
              "  view.pageAction = 'Update Shipment';",
              "  if (pm.response.code == 200) {",
              "    envSet('mtoShipmentETag', response.eTag);",
              "    view.alertTitle = 'Update Succeeded';",
              "    view.alertType = 'success';",
              "    view.updatesMade = {};",
              "    Object.keys(JSON.parse(request.data)).forEach((key) => {",
              "      view.updatesMade[key] = response[key];",
              "    })",
              "  } else {",
              "    view.alertTitle = 'Update Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// Setup the visualization template.",
              "pm.visualizer.set(template, view);",
              ""
            ]
          }
        }
      ]
    },
    {
      "id": "upload-proof-of-service",
      "name": "Upload Proof Of Service",
      "request": {
        "description": {
          "content": "\nThis Postman Request was created with the Postman SDK and not the Postman.app\nUI.\n\nThis Request uses the templates found in\n**templates/visualize.html**.\n",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "payment-requests",
            "{{paymentRequestID}}",
            "uploads"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Postman-Request-ID",
            "value": "upload-proof-of-service"
          },
          {
            "key": "Content-Type",
            "value": "multipart/form-data; charset=utf-8; boundary=\";\""
          }
        ],
        "method": "POST",
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "_": {
                "postman_listIndexKey": "key",
                "postman_listAllowsMultipleValues": true,
                "postman_propertyIsList": true,
                "postman_listIndexCaseInsensitive": false
              },
              "key": "",
              "value": ""
            }
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "1e1f2ad7-c7fa-4610-be3a-087e397d3d0e",
            "type": "text/javascript",
            "exec": [
              "function envGet(v) {",
              "  return pm.collectionVariables.get(v);",
              "}",
              "",
              "function envSet(k, v) {",
              "  pm.collectionVariables.set(k, v);",
              "}",
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "f8a73f7a-e313-4437-8c40-15c6be302f4e",
            "type": "text/javascript",
            "exec": [
              "// A helpful function that's less characters to type to get a Collection",
              "// Variable.",
              "function envGet(v) {",
              "  return pm.collectionVariables.get(v);",
              "}",
              "",
              "// A helpful function that's less characters to type to set a Collection",
              "// Variable.",
              "function envSet(k, v) {",
              "  pm.collectionVariables.set(k, v);",
              "}",
              "",
              "// A helpful map of relationships between request file names and titles.",
              "const requestIDToTitle = {",
              "  'move-task-orders': 'Get MoveTaskOrder By ID',",
              "  moves: 'Get All Moves',",
              "  'mto-shipments-sit-extensions': 'Create SIT Extension For Shipment ID',",
              "};",
              "",
              "// The response JSON that Postman created.",
              "const response = pm.response.json();",
              "",
              "// The custom header for Postman Request ID which is the filename of the",
              "// ./requests files.",
              "const pmRequestID = pm.request.getHeaders()['Postman-Request-ID'];",
              "",
              "// The template file that is set in example-get-move-task-orders/index.js that",
              "// references example-get-move-task-orders/templates/visualize.html",
              "const template = envGet('visualizeTemplate');",
              "",
              "// A helpful string that can be used to show \"undefined\" in the Visualize tab.",
              "const undefHTML = '<code>undefined</code>';",
              "",
              "// The view object that gets fed into the template file. These are base values",
              "// and will be modified in the next conditional checks around the status code.",
              "var view = {",
              "  viewUpdatedAt: '',",
              "  pageTitle: requestIDToTitle[pmRequestID],",
              "  pageHeading: 'GHC Contractor',",
              "  pageAction: 'Receives Moves information',",
              "  alertTitle: '',",
              "  alertType: '',",
              "  customerFullName: envGet('customerFullName'),",
              "  moveCode: envGet('moveCode'),",
              "  moveID: envGet('moveID'),",
              "  mtoShipmentID: envGet('mtoShipmentID'),",
              "  mtoShipmentETag: envGet('mtoShipmentETag'),",
              "  reweighID: envGet('reweighID'),",
              "  reweighETag: envGet('reweighETag'),",
              "  errorMessage: '',",
              "  errorDetail: '',",
              "  errorTraceId: '',",
              "  move_task_orders: false,",
              "  moves: false,",
              "  mto_shipments_sit_extensions: false,",
              "  show_reweigh: false,",
              "  show_payment_request: false,",
              "  show_proof_of_service: false,",
              "  show_updated_mto_shipment: false,",
              "};",
              "",
              "view.viewUpdatedAt = `${new Date()}`;",
              "",
              "if (pm.response.code >= 300) {",
              "  console.debug(response);",
              "  view.alertTitle     = 'Something went wrong';",
              "  view.alertType      = 'error';",
              "  view.errorMessage   = response.title;",
              "  view.errorDetail    = response.detail;",
              "  view.errorTraceId   = response.instance;",
              "}",
              "",
              "if (pmRequestID === 'moves') {",
              "  view.moves = true;",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle = 'List All Moves';",
              "    view.pageAction = 'Get All Moves';",
              "    view.alertType  = 'success';",
              "    view.movesList = response;",
              "  }",
              "",
              "}",
              "",
              "if (pmRequestID === 'move-task-orders') {",
              "  view.move_task_orders = true;",
              "",
              "  // If the Move is found, we'll update the view object appropriately.",
              "  if (pm.response.code === 200) {",
              "    view.customerFullName = response.order.customer.firstName.trim();",
              "    view.customerFullName += ' ';",
              "    view.customerFullName += response.order.customer.lastName.trim();",
              "",
              "    console.info('Setting customerFullName in the Collection Variables');",
              "    envSet('customerFullName', view.customerFullName);",
              "",
              "    view.moveCode = response.moveCode;",
              "    view.moveID = response.id;",
              "",
              "    console.info('Setting moveTaskOrderCode, moveTaskOrderID, moveTaskOrderETag in the Collection Variables');",
              "    envSet('moveTaskOrderCode', view.moveCode);",
              "    envSet('moveTaskOrderID', view.moveID);",
              "    envSet('moveTaskOrderETag', response.eTag);",
              "    envSet('mtoShipmentID', response.mtoShipments[0].id);",
              "    envSet('mtoShipmentETag', response.mtoShipments[0].eTag);",
              "    if (response.mtoShipments[0].reweigh) {",
              "      envSet('reweighID', response.mtoShipments[0].reweigh.id);",
              "      envSet('reweighETag', response.mtoShipments[0].reweigh.eTag);",
              "      view.show_reweigh = true;",
              "    }",
              "",
              "    if (view.show_reweigh) {",
              "      const reweigh = response.mtoShipments[0].reweigh;",
              "      if (reweigh.weight || reweigh.verificationReason) {",
              "        // reweigh requested and performed",
              "        view.alertTitle = 'Reweigh has been requested and completed';",
              "        view.alertType  = 'success';",
              "      } else {",
              "        // reweigh requested but not performed yet",
              "        view.alertTitle = 'Reweigh has been requested';",
              "        view.alertType  = 'warning';",
              "      }",
              "      view.reweigh_details = {",
              "        id: reweigh.id,",
              "        requestedAt: reweigh.requestedAt,",
              "        requestedBy: reweigh.requestedBy,",
              "        weight: reweigh.weight,",
              "        verificationReason: reweigh.verificationReason,",
              "        verificationProvidedAt: reweigh.verificationProvidedAt,",
              "      }",
              "    } else {",
              "      view.alertTitle = 'Move is now available to GHC Prime Contractor';",
              "      view.alertType  = 'success';",
              "    }",
              "",
              "    // prepare a payment request",
              "    const paymentRequest = {",
              "      isFinal: false,",
              "      moveTaskOrderID: view.moveID,",
              "      serviceItems: []",
              "    };",
              "    const serviceItemsToInvoice = envGet('serviceItemsToInvoice');",
              "    response.mtoServiceItems",
              "      .filter((serviceItem) => {",
              "        return serviceItemsToInvoice.includes(serviceItem.reServiceCode) && serviceItem.mtoShipmentID === response.mtoShipments[0].id;",
              "      })",
              "      .forEach((serviceItem) => {",
              "        console.info(serviceItem);",
              "        const si = { id: serviceItem.id };",
              "        if (serviceItem.reServiceCode === \"DDASIT\") {",
              "          si.params = [{",
              "",
              "            key: \"SITPaymentRequestStart\",",
              "            value: \"2021-09-01\",",
              "          },{",
              "            key: \"SITPaymentRequestEnd\",",
              "            value: \"2021-09-30\",",
              "          }];",
              "        }",
              "        paymentRequest.serviceItems.add(si);",
              "      });",
              "    envSet('paymentRequestPayload', JSON.stringify(paymentRequest, null, 2));",
              "    console.info(envGet('paymentRequestPayload'));",
              "  }",
              "",
              "  // If the Move is not found, we'll update the view object appropriately.",
              "  if (pm.response.code === 404) {",
              "    view.alertTitle   = 'Move is not available to GHC Prime Contractor';",
              "    view.alertType    = 'error';",
              "    view.moveCode     = undefHTML;",
              "    view.moveID       = undefHTML;",
              "    view.errorMessage = response.title;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-sit-mto-service-items') {",
              "  view.create_sit_mto_service_items = true;",
              "  view.pageAction = 'Create Destination SIT Service Items';",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle     = 'Destination SIT Service Items Created';",
              "    view.alertType      = 'success';",
              "    view.sitServiceItem = response;",
              "  } else {",
              "    view.alertTitle     = 'Destination SIT Service Items Create Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'mto-shipments-sit-extensions') {",
              "  view.mto_shipments_sit_extensions = true;",
              "",
              "  if (pm.response.code === 201) {",
              "    view.alertTitle = 'SIT Extension Created';",
              "    view.alertType  = 'success';",
              "    view.pageAction = 'Create SIT Extension';",
              "    view.sitExtension = response;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-payment-request') {",
              "  view.show_payment_request = true",
              "  view.pageAction = 'Payment Request Creation';",
              "  if (pm.response.code == 201) {",
              "    let total = 0;",
              "    view.alertTitle = 'Creation Succeeded';",
              "    view.alertType = 'success';",
              "    envSet('paymentRequestID', response.id);",
              "    view.paymentRequest = response;",
              "    view.paymentRequest.paymentServiceItems.forEach(psi => total += psi.priceCents);",
              "    total = total/100",
              "    view.paymentRequest.total = total;",
              "    view.paymentRequest.payload = request.data;",
              "  } else {",
              "    view.alertTitle = 'Creation Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'upload-proof-of-service') {",
              "  view.show_proof_of_service = true",
              "  view.pageAction = 'Proof of Service Upload';",
              "  if (pm.response.code == 201) {",
              "    view.alertTitle = 'Upload Succeeded';",
              "    view.alertType = 'success';",
              "    view.proofOfServiceDetails = response;",
              "  } else {",
              "    view.alertTitle = 'Upload Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// response from update-mto-shipment endpoint is shipment JSON with new eTag",
              "if (request.url.includes('/prime/v1/mto-shipments') && request.method === \"PATCH\") {",
              "  view.show_updated_mto_shipment = true",
              "  view.pageAction = 'Update Shipment';",
              "  if (pm.response.code == 200) {",
              "    envSet('mtoShipmentETag', response.eTag);",
              "    view.alertTitle = 'Update Succeeded';",
              "    view.alertType = 'success';",
              "    view.updatesMade = {};",
              "    Object.keys(JSON.parse(request.data)).forEach((key) => {",
              "      view.updatesMade[key] = response[key];",
              "    })",
              "  } else {",
              "    view.alertTitle = 'Update Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// Setup the visualization template.",
              "pm.visualizer.set(template, view);",
              ""
            ]
          }
        }
      ]
    },
    {
      "id": "add-reweigh-weight",
      "name": "Update the reweigh weight on a shipment",
      "request": {
        "description": {
          "content": "\nThis Postman Request was created with the Postman SDK and not the Postman.app\nUI.\n\nThis endpoint Updates the shipment.\n\nThis Request uses the templates found in\n**templates/visualize.html**.\n",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "mto-shipments",
            "{{mtoShipmentID}}",
            "reweighs",
            "{{reweighID}}"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Postman-Request-ID",
            "value": "add-reweigh-weight"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "If-Match",
            "value": "{{reweighETag}}"
          }
        ],
        "method": "PATCH",
        "body": {
          "mode": "raw",
          "raw": "{\n  \"verificationReason\": \"The reweigh was not performed because the shipment was already delivered\"\n}"
        }
      },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "a8284e4f-ab37-49af-9fa8-dbb33455f598",
            "type": "text/javascript",
            "exec": [
              "function envGet(v) {",
              "  return pm.collectionVariables.get(v);",
              "}",
              "",
              "function envSet(k, v) {",
              "  pm.collectionVariables.set(k, v);",
              "}",
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "0b1c5c14-d937-4fe3-8999-34c7fc93953f",
            "type": "text/javascript",
            "exec": [
              "// A helpful function that's less characters to type to get a Collection",
              "// Variable.",
              "function envGet(v) {",
              "  return pm.collectionVariables.get(v);",
              "}",
              "",
              "// A helpful function that's less characters to type to set a Collection",
              "// Variable.",
              "function envSet(k, v) {",
              "  pm.collectionVariables.set(k, v);",
              "}",
              "",
              "// A helpful map of relationships between request file names and titles.",
              "const requestIDToTitle = {",
              "  'move-task-orders': 'Get MoveTaskOrder By ID',",
              "  moves: 'Get All Moves',",
              "  'mto-shipments-sit-extensions': 'Create SIT Extension For Shipment ID',",
              "};",
              "",
              "// The response JSON that Postman created.",
              "const response = pm.response.json();",
              "",
              "// The custom header for Postman Request ID which is the filename of the",
              "// ./requests files.",
              "const pmRequestID = pm.request.getHeaders()['Postman-Request-ID'];",
              "",
              "// The template file that is set in example-get-move-task-orders/index.js that",
              "// references example-get-move-task-orders/templates/visualize.html",
              "const template = envGet('visualizeTemplate');",
              "",
              "// A helpful string that can be used to show \"undefined\" in the Visualize tab.",
              "const undefHTML = '<code>undefined</code>';",
              "",
              "// The view object that gets fed into the template file. These are base values",
              "// and will be modified in the next conditional checks around the status code.",
              "var view = {",
              "  viewUpdatedAt: '',",
              "  pageTitle: requestIDToTitle[pmRequestID],",
              "  pageHeading: 'GHC Contractor',",
              "  pageAction: 'Receives Moves information',",
              "  alertTitle: '',",
              "  alertType: '',",
              "  customerFullName: envGet('customerFullName'),",
              "  moveCode: envGet('moveCode'),",
              "  moveID: envGet('moveID'),",
              "  mtoShipmentID: envGet('mtoShipmentID'),",
              "  mtoShipmentETag: envGet('mtoShipmentETag'),",
              "  reweighID: envGet('reweighID'),",
              "  reweighETag: envGet('reweighETag'),",
              "  errorMessage: '',",
              "  errorDetail: '',",
              "  errorTraceId: '',",
              "  move_task_orders: false,",
              "  moves: false,",
              "  mto_shipments_sit_extensions: false,",
              "  show_reweigh: false,",
              "  show_payment_request: false,",
              "  show_proof_of_service: false,",
              "  show_updated_mto_shipment: false,",
              "};",
              "",
              "view.viewUpdatedAt = `${new Date()}`;",
              "",
              "if (pm.response.code >= 300) {",
              "  console.debug(response);",
              "  view.alertTitle     = 'Something went wrong';",
              "  view.alertType      = 'error';",
              "  view.errorMessage   = response.title;",
              "  view.errorDetail    = response.detail;",
              "  view.errorTraceId   = response.instance;",
              "}",
              "",
              "if (pmRequestID === 'moves') {",
              "  view.moves = true;",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle = 'List All Moves';",
              "    view.pageAction = 'Get All Moves';",
              "    view.alertType  = 'success';",
              "    view.movesList = response;",
              "  }",
              "",
              "}",
              "",
              "if (pmRequestID === 'move-task-orders') {",
              "  view.move_task_orders = true;",
              "",
              "  // If the Move is found, we'll update the view object appropriately.",
              "  if (pm.response.code === 200) {",
              "    view.customerFullName = response.order.customer.firstName.trim();",
              "    view.customerFullName += ' ';",
              "    view.customerFullName += response.order.customer.lastName.trim();",
              "",
              "    console.info('Setting customerFullName in the Collection Variables');",
              "    envSet('customerFullName', view.customerFullName);",
              "",
              "    view.moveCode = response.moveCode;",
              "    view.moveID = response.id;",
              "",
              "    console.info('Setting moveTaskOrderCode, moveTaskOrderID, moveTaskOrderETag in the Collection Variables');",
              "    envSet('moveTaskOrderCode', view.moveCode);",
              "    envSet('moveTaskOrderID', view.moveID);",
              "    envSet('moveTaskOrderETag', response.eTag);",
              "    envSet('mtoShipmentID', response.mtoShipments[0].id);",
              "    envSet('mtoShipmentETag', response.mtoShipments[0].eTag);",
              "    if (response.mtoShipments[0].reweigh) {",
              "      envSet('reweighID', response.mtoShipments[0].reweigh.id);",
              "      envSet('reweighETag', response.mtoShipments[0].reweigh.eTag);",
              "      view.show_reweigh = true;",
              "    }",
              "",
              "    if (view.show_reweigh) {",
              "      const reweigh = response.mtoShipments[0].reweigh;",
              "      if (reweigh.weight || reweigh.verificationReason) {",
              "        // reweigh requested and performed",
              "        view.alertTitle = 'Reweigh has been requested and completed';",
              "        view.alertType  = 'success';",
              "      } else {",
              "        // reweigh requested but not performed yet",
              "        view.alertTitle = 'Reweigh has been requested';",
              "        view.alertType  = 'warning';",
              "      }",
              "      view.reweigh_details = {",
              "        id: reweigh.id,",
              "        requestedAt: reweigh.requestedAt,",
              "        requestedBy: reweigh.requestedBy,",
              "        weight: reweigh.weight,",
              "        verificationReason: reweigh.verificationReason,",
              "        verificationProvidedAt: reweigh.verificationProvidedAt,",
              "      }",
              "    } else {",
              "      view.alertTitle = 'Move is now available to GHC Prime Contractor';",
              "      view.alertType  = 'success';",
              "    }",
              "",
              "    // prepare a payment request",
              "    const paymentRequest = {",
              "      isFinal: false,",
              "      moveTaskOrderID: view.moveID,",
              "      serviceItems: []",
              "    };",
              "    const serviceItemsToInvoice = envGet('serviceItemsToInvoice');",
              "    response.mtoServiceItems",
              "      .filter((serviceItem) => {",
              "        return serviceItemsToInvoice.includes(serviceItem.reServiceCode) && serviceItem.mtoShipmentID === response.mtoShipments[0].id;",
              "      })",
              "      .forEach((serviceItem) => {",
              "        console.info(serviceItem);",
              "        const si = { id: serviceItem.id };",
              "        if (serviceItem.reServiceCode === \"DDASIT\") {",
              "          si.params = [{",
              "",
              "            key: \"SITPaymentRequestStart\",",
              "            value: \"2021-09-01\",",
              "          },{",
              "            key: \"SITPaymentRequestEnd\",",
              "            value: \"2021-09-30\",",
              "          }];",
              "        }",
              "        paymentRequest.serviceItems.add(si);",
              "      });",
              "    envSet('paymentRequestPayload', JSON.stringify(paymentRequest, null, 2));",
              "    console.info(envGet('paymentRequestPayload'));",
              "  }",
              "",
              "  // If the Move is not found, we'll update the view object appropriately.",
              "  if (pm.response.code === 404) {",
              "    view.alertTitle   = 'Move is not available to GHC Prime Contractor';",
              "    view.alertType    = 'error';",
              "    view.moveCode     = undefHTML;",
              "    view.moveID       = undefHTML;",
              "    view.errorMessage = response.title;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-sit-mto-service-items') {",
              "  view.create_sit_mto_service_items = true;",
              "  view.pageAction = 'Create Destination SIT Service Items';",
              "",
              "  if (pm.response.code === 200) {",
              "    view.alertTitle     = 'Destination SIT Service Items Created';",
              "    view.alertType      = 'success';",
              "    view.sitServiceItem = response;",
              "  } else {",
              "    view.alertTitle     = 'Destination SIT Service Items Create Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'mto-shipments-sit-extensions') {",
              "  view.mto_shipments_sit_extensions = true;",
              "",
              "  if (pm.response.code === 201) {",
              "    view.alertTitle = 'SIT Extension Created';",
              "    view.alertType  = 'success';",
              "    view.pageAction = 'Create SIT Extension';",
              "    view.sitExtension = response;",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'create-payment-request') {",
              "  view.show_payment_request = true",
              "  view.pageAction = 'Payment Request Creation';",
              "  if (pm.response.code == 201) {",
              "    let total = 0;",
              "    view.alertTitle = 'Creation Succeeded';",
              "    view.alertType = 'success';",
              "    envSet('paymentRequestID', response.id);",
              "    view.paymentRequest = response;",
              "    view.paymentRequest.paymentServiceItems.forEach(psi => total += psi.priceCents);",
              "    total = total/100",
              "    view.paymentRequest.total = total;",
              "    view.paymentRequest.payload = request.data;",
              "  } else {",
              "    view.alertTitle = 'Creation Failed';",
              "  }",
              "}",
              "",
              "if (pmRequestID === 'upload-proof-of-service') {",
              "  view.show_proof_of_service = true",
              "  view.pageAction = 'Proof of Service Upload';",
              "  if (pm.response.code == 201) {",
              "    view.alertTitle = 'Upload Succeeded';",
              "    view.alertType = 'success';",
              "    view.proofOfServiceDetails = response;",
              "  } else {",
              "    view.alertTitle = 'Upload Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// response from update-mto-shipment endpoint is shipment JSON with new eTag",
              "if (request.url.includes('/prime/v1/mto-shipments') && request.method === \"PATCH\") {",
              "  view.show_updated_mto_shipment = true",
              "  view.pageAction = 'Update Shipment';",
              "  if (pm.response.code == 200) {",
              "    envSet('mtoShipmentETag', response.eTag);",
              "    view.alertTitle = 'Update Succeeded';",
              "    view.alertType = 'success';",
              "    view.updatesMade = {};",
              "    Object.keys(JSON.parse(request.data)).forEach((key) => {",
              "      view.updatesMade[key] = response[key];",
              "    })",
              "  } else {",
              "    view.alertTitle = 'Update Failed';",
              "    view.alertType = 'error';",
              "  }",
              "}",
              "",
              "// Setup the visualization template.",
              "pm.visualizer.set(template, view);",
              ""
            ]
          }
        }
      ]
    }
  ],
  "event": [],
  "variable": [
    {
      "id": "baseUrl",
      "type": "string",
      "value": "https://primelocal:9443/prime/v1"
    },
    {
      "id": "serviceItemsToInvoice",
      "type": "string",
      "value": "DLH,FSC"
    },
    {
      "id": "moveTaskOrderID",
      "type": "string",
      "value": "RDY4PY"
    },
    {
      "id": "moveTaskOrderCode",
      "type": "string",
      "value": "RDY4PY"
    },
    {
      "id": "sitDate",
      "type": "string",
      "value": "2021-09-13"
    },
    {
      "id": "primeEstimatedWeight",
      "type": "any",
      "value": 13000
    },
    {
      "id": "primeActualWeight",
      "type": "any",
      "value": 13128
    },
    {
      "id": "paymentRequestID",
      "type": "string",
      "value": ""
    },
    {
      "id": "customerFullName",
      "type": "string",
      "value": ""
    },
    {
      "id": "mtoShipmentID",
      "type": "string",
      "value": ""
    },
    {
      "id": "mtoShipmentETag",
      "type": "string",
      "value": ""
    },
    {
      "id": "reweighID",
      "type": "string",
      "value": ""
    },
    {
      "id": "reweighETag",
      "type": "string",
      "value": ""
    },
    {
      "id": "moveTaskOrderETag",
      "type": "string",
      "value": ""
    },
    {
      "id": "paymentRequestPayload",
      "type": "string",
      "value": ""
    },
    {
      "id": "visualizeTemplate",
      "type": "string",
      "value": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>{{pageTitle}}</title>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/uswds/2.11.1/css/uswds.min.css\" integrity=\"sha512-jTdlH2LXTQ/nSPgY0SoocLYibqnSu0B7/DM2cmA3jPrw89dbtZKeytKXDJPYlZpjkHfHUlTe/4MTGovdM73AJw==\" crossorigin=\"anonymous\" />\n  <link href=\"https://gitcdn.link/repo/transcom/mymove/master/public/static/style.css\" rel=\"stylesheet\">\n  <link href=\"https://fonts.googleapis.com/css2?family=Public+Sans:wght@400;700&display=swap\" rel=\"stylesheet\" />\n  <style>\n  li {\n    list-style-type: none !important;\n  }\n  .usa-nav-container {\n    max-width: 100% !important;\n  }\n  .usa-logo__text {\n    width: 100%;\n    text-align: center;\n  }\n  .my-prime-container {\n    padding: 0 20px;\n  }\n  hr.divider {\n    height: 10px;\n    margin: 0;\n    border: none;\n    border-top: 1px dotted #252f3e;\n  }\n  </style>\n</head>\n<body>\n  <header class=\"usa-header usa-header--basic\" role=\"banner\">\n    <div class=\"my-move-header\">\n      <p class=\"usa-logo__text\">(For Demo Purposes Only) {{pageTitle}}</p>\n    </div>\n  </header>\n\n  <div class=\"my-prime-container\">\n    <h2 class=\"site-preview-heading font-sans-2xl\">{{pageHeading}}</h2>\n    <h3 class=\"site-component-section-title font-sans-xl\">{{pageAction}}</h3>\n\n    <div class=\"usa-alert usa-alert--{{alertType}}\" id=\"alert\" >\n      <div class=\"usa-alert__body\">\n        <h4 id=\"alert-heading\" class=\"usa-alert__heading margin-bottom-4\">{{alertTitle}}</h4>\n        {{#if move_task_orders}}\n        <ul class=\"usa-content-list font-mono-md\">\n          <li>\n            <strong>Move code:</strong> {{{moveCode}}}\n          </li>\n          <li>\n            <strong>Move ID:</strong> {{{moveID}}}\n          </li>\n          {{#if errorMessage}}\n          <li>\n            <strong>Error: </strong> {{errorMessage}}\n          </li>\n          {{else}}\n          <li>\n            <strong>Customer name:</strong> {{customerFullName}}\n          </li>\n          {{/if}}\n        </ul>\n          {{#if show_reweigh}}\n          <h5 class=\"usa-alert__heading margin-bottom-4\">Reweigh Request Details</h5>\n        <ul class=\"usa-content-list font-mono-md\">\n          {{#each reweigh_details}}\n          <li><strong>{{@key}}:</strong> {{{this}}}</li>\n          {{/each}}\n        </ul>\n          {{/if}}\n        {{/if}}\n        {{#if moves}}\n        <ul class=\"usa-content-list font-mono-md\">\n        {{#each movesList}}\n        <hr>\n        {{#each this}}\n        <li>\n          <strong>{{@key}}:</strong> {{this}}\n        </li>\n        {{/each}}\n        {{/each}}\n        </ul>\n        {{/if}}\n        {{#if create_sit_mto_service_items}}\n          {{#each sitServiceItem}}\n            <br />\n            <ul class=\"usa-content-list font-mono-md\">\n              <li><strong>Service name: </strong> {{{this.reServiceName}}}</li>\n              <li><strong>Service Code: </strong> {{{this.reServiceCode}}}</li>\n              <li><strong>Status: </strong> {{{this.status}}}</li>\n              <li><strong>Entry Date: </strong> {{{this.sitEntryDate}}}</li>\n            </ul>\n          {{/each}}\n        {{/if}}\n        {{#if mto_shipments_sit_extensions}}\n        <ul class=\"usa-content-list font-mono-md\">\n          {{#each sitExtension}}\n          <li>\n            <strong>{{@key}}: </strong> {{{this}}}\n          </li>\n          {{/each}}\n        </ul>\n        {{/if}}\n        {{#if show_payment_request}}\n        <ul class=\"usa-content-list font-mono-md\">\n          <li><strong>ID: </strong> {{{paymentRequest.id}}}</li>\n          <li><strong>Payment Request Number: </strong> {{{paymentRequest.paymentRequestNumber}}}</li>\n          <li><strong>Move Task Order ID: </strong> {{{paymentRequest.moveTaskOrderID}}}</li>\n          <li><strong>Total: </strong> ${{{paymentRequest.total}}}</li>\n        </ul>\n        <br />\n        <strong>Payload sent by Prime</strong><br />\n        <pre>{{{paymentRequest.payload}}}</pre>\n        {{/if}}\n        {{#if show_proof_of_service}}\n        <ul class=\"usa-content-list font-mono-md\">\n          <li><strong>Filename: </strong> {{{proofOfServiceDetails.filename}}}</li>\n          <li><strong>Size in bytes: </strong> {{{proofOfServiceDetails.bytes}}}</li>\n          <li><strong>Created At: </strong> {{{proofOfServiceDetails.createdAt}}}</li>\n        </ul>\n        {{/if}}\n        {{#if show_updated_mto_shipment}}\n        <ul class=\"usa-content-list font-mono-md\">\n          {{#each updatesMade}}\n          <li><strong>{{@key}}: </strong> {{{this}}}</li>\n          {{/each}}\n        </ul>\n        {{/if}}\n        {{#if errorMessage}}\n        <div>\n          <ul class=\"usa-content-list font-mono-md\">\n            <li>\n              <strong>Error: </strong> {{errorMessage}}\n            </li>\n            <li>\n              <strong>Detail: </strong> {{errorDetail}}\n            </li>\n            <li>\n              <strong>Trace ID: </strong> {{errorTraceId}}\n            </li>\n          </ul>\n        </div>\n        {{/if}}\n      </div>\n    </div>\n\n  </div>\n  <footer class=\"usa-footer usa-footer--basic\" role=\"banner\">\n    <div class=\"my-move-header\">\n      <p class=\"usa-logo__text\">View updated {{viewUpdatedAt}}</p>\n    </div>\n  </header>\n</body>\n</html>\n"
    }
  ],
  "info": {
    "_postman_id": "1256868a-22d2-444c-a1e8-b4041c5bd499",
    "name": "September 2021 Slice Demo",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "\n# September 2021 Slice Demo\n\nSee the link to the slice demo script\n\nThis Postman Collection was created with the Postman SDK and not the Postman.app UI.\n",
      "type": "text/plain"
    }
  }
}