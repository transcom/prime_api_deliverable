=begin
#move.mil Prime API

#The API for move.mil Prime actions.

OpenAPI spec version: 0.1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'date'

module SwaggerClient
  class MoveTaskOrder
    attr_accessor :id

    attr_accessor :code

    attr_accessor :move_id

    attr_accessor :move_date

    attr_accessor :status

    attr_accessor :entitlements

    attr_accessor :move_task_orders_type

    attr_accessor :customer

    attr_accessor :requested_pickup_date

    attr_accessor :origin_duty_station

    attr_accessor :origin_ppso

    attr_accessor :destination_duty_station

    attr_accessor :destination_ppso

    attr_accessor :remarks

    attr_accessor :service_items

    attr_accessor :created_at

    attr_accessor :updated_at

    attr_accessor :deleted_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'code' => :'code',
        :'move_id' => :'moveID',
        :'move_date' => :'moveDate',
        :'status' => :'status',
        :'entitlements' => :'entitlements',
        :'move_task_orders_type' => :'moveTaskOrdersType',
        :'customer' => :'customer',
        :'requested_pickup_date' => :'requestedPickupDate',
        :'origin_duty_station' => :'originDutyStation',
        :'origin_ppso' => :'originPPSO',
        :'destination_duty_station' => :'destinationDutyStation',
        :'destination_ppso' => :'destinationPPSO',
        :'remarks' => :'remarks',
        :'service_items' => :'serviceItems',
        :'created_at' => :'createdAt',
        :'updated_at' => :'updatedAt',
        :'deleted_at' => :'deletedAt'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'code' => :'String',
        :'move_id' => :'String',
        :'move_date' => :'Date',
        :'status' => :'String',
        :'entitlements' => :'Entitlements',
        :'move_task_orders_type' => :'String',
        :'customer' => :'Customer',
        :'requested_pickup_date' => :'Date',
        :'origin_duty_station' => :'String',
        :'origin_ppso' => :'String',
        :'destination_duty_station' => :'String',
        :'destination_ppso' => :'String',
        :'remarks' => :'String',
        :'service_items' => :'Array<ServiceItem>',
        :'created_at' => :'Date',
        :'updated_at' => :'Date',
        :'deleted_at' => :'Date'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.has_key?(:'moveID')
        self.move_id = attributes[:'moveID']
      end

      if attributes.has_key?(:'moveDate')
        self.move_date = attributes[:'moveDate']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'entitlements')
        self.entitlements = attributes[:'entitlements']
      end

      if attributes.has_key?(:'moveTaskOrdersType')
        self.move_task_orders_type = attributes[:'moveTaskOrdersType']
      end

      if attributes.has_key?(:'customer')
        self.customer = attributes[:'customer']
      end

      if attributes.has_key?(:'requestedPickupDate')
        self.requested_pickup_date = attributes[:'requestedPickupDate']
      end

      if attributes.has_key?(:'originDutyStation')
        self.origin_duty_station = attributes[:'originDutyStation']
      end

      if attributes.has_key?(:'originPPSO')
        self.origin_ppso = attributes[:'originPPSO']
      end

      if attributes.has_key?(:'destinationDutyStation')
        self.destination_duty_station = attributes[:'destinationDutyStation']
      end

      if attributes.has_key?(:'destinationPPSO')
        self.destination_ppso = attributes[:'destinationPPSO']
      end

      if attributes.has_key?(:'remarks')
        self.remarks = attributes[:'remarks']
      end

      if attributes.has_key?(:'serviceItems')
        if (value = attributes[:'serviceItems']).is_a?(Array)
          self.service_items = value
        end
      end

      if attributes.has_key?(:'createdAt')
        self.created_at = attributes[:'createdAt']
      end

      if attributes.has_key?(:'updatedAt')
        self.updated_at = attributes[:'updatedAt']
      end

      if attributes.has_key?(:'deletedAt')
        self.deleted_at = attributes[:'deletedAt']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ['APPROVED', 'REJECTED', 'SUBMITTED'])
      return false unless status_validator.valid?(@status)
      move_task_orders_type_validator = EnumAttributeValidator.new('String', ['NON_TEMPORARY_STORAGE', 'PRIME'])
      return false unless move_task_orders_type_validator.valid?(@move_task_orders_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['APPROVED', 'REJECTED', 'SUBMITTED'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] move_task_orders_type Object to be assigned
    def move_task_orders_type=(move_task_orders_type)
      validator = EnumAttributeValidator.new('String', ['NON_TEMPORARY_STORAGE', 'PRIME'])
      unless validator.valid?(move_task_orders_type)
        fail ArgumentError, 'invalid value for "move_task_orders_type", must be one of #{validator.allowable_values}.'
      end
      @move_task_orders_type = move_task_orders_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          code == o.code &&
          move_id == o.move_id &&
          move_date == o.move_date &&
          status == o.status &&
          entitlements == o.entitlements &&
          move_task_orders_type == o.move_task_orders_type &&
          customer == o.customer &&
          requested_pickup_date == o.requested_pickup_date &&
          origin_duty_station == o.origin_duty_station &&
          origin_ppso == o.origin_ppso &&
          destination_duty_station == o.destination_duty_station &&
          destination_ppso == o.destination_ppso &&
          remarks == o.remarks &&
          service_items == o.service_items &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          deleted_at == o.deleted_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, code, move_id, move_date, status, entitlements, move_task_orders_type, customer, requested_pickup_date, origin_duty_station, origin_ppso, destination_duty_station, destination_ppso, remarks, service_items, created_at, updated_at, deleted_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
