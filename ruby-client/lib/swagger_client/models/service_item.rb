=begin
#move.mil Prime API

#The API for move.mil Prime actions.

OpenAPI spec version: 0.1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'date'

module SwaggerClient
  class ServiceItem
    attr_accessor :id

    attr_accessor :move_task_order_id

    attr_accessor :status

    attr_accessor :fee_type

    attr_accessor :total

    attr_accessor :quantity

    attr_accessor :rate

    attr_accessor :description

    attr_accessor :submitted_at

    attr_accessor :approved_at

    attr_accessor :rejected_at

    attr_accessor :created_at

    attr_accessor :updated_at

    attr_accessor :deleted_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'move_task_order_id' => :'MoveTaskOrderID',
        :'status' => :'status',
        :'fee_type' => :'feeType',
        :'total' => :'total',
        :'quantity' => :'quantity',
        :'rate' => :'rate',
        :'description' => :'description',
        :'submitted_at' => :'submittedAt',
        :'approved_at' => :'approvedAt',
        :'rejected_at' => :'rejectedAt',
        :'created_at' => :'createdAt',
        :'updated_at' => :'updatedAt',
        :'deleted_at' => :'deletedAt'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'move_task_order_id' => :'String',
        :'status' => :'String',
        :'fee_type' => :'String',
        :'total' => :'Integer',
        :'quantity' => :'Integer',
        :'rate' => :'Integer',
        :'description' => :'String',
        :'submitted_at' => :'Date',
        :'approved_at' => :'Date',
        :'rejected_at' => :'Date',
        :'created_at' => :'Date',
        :'updated_at' => :'Date',
        :'deleted_at' => :'Date'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'MoveTaskOrderID')
        self.move_task_order_id = attributes[:'MoveTaskOrderID']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'feeType')
        self.fee_type = attributes[:'feeType']
      end

      if attributes.has_key?(:'total')
        self.total = attributes[:'total']
      end

      if attributes.has_key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.has_key?(:'rate')
        self.rate = attributes[:'rate']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'submittedAt')
        self.submitted_at = attributes[:'submittedAt']
      end

      if attributes.has_key?(:'approvedAt')
        self.approved_at = attributes[:'approvedAt']
      end

      if attributes.has_key?(:'rejectedAt')
        self.rejected_at = attributes[:'rejectedAt']
      end

      if attributes.has_key?(:'createdAt')
        self.created_at = attributes[:'createdAt']
      end

      if attributes.has_key?(:'updatedAt')
        self.updated_at = attributes[:'updatedAt']
      end

      if attributes.has_key?(:'deletedAt')
        self.deleted_at = attributes[:'deletedAt']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ['APPROVED', 'SUBMITTED', 'REJECTED'])
      return false unless status_validator.valid?(@status)
      fee_type_validator = EnumAttributeValidator.new('String', ['COUNSELING', 'CRATING', 'TRUCKING', 'SHUTTLE'])
      return false unless fee_type_validator.valid?(@fee_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['APPROVED', 'SUBMITTED', 'REJECTED'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fee_type Object to be assigned
    def fee_type=(fee_type)
      validator = EnumAttributeValidator.new('String', ['COUNSELING', 'CRATING', 'TRUCKING', 'SHUTTLE'])
      unless validator.valid?(fee_type)
        fail ArgumentError, 'invalid value for "fee_type", must be one of #{validator.allowable_values}.'
      end
      @fee_type = fee_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          move_task_order_id == o.move_task_order_id &&
          status == o.status &&
          fee_type == o.fee_type &&
          total == o.total &&
          quantity == o.quantity &&
          rate == o.rate &&
          description == o.description &&
          submitted_at == o.submitted_at &&
          approved_at == o.approved_at &&
          rejected_at == o.rejected_at &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          deleted_at == o.deleted_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, move_task_order_id, status, fee_type, total, quantity, rate, description, submitted_at, approved_at, rejected_at, created_at, updated_at, deleted_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
