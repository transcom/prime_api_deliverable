=begin
#move.mil Prime API

#The API for move.mil Prime actions.

OpenAPI spec version: 0.1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'uri'

module SwaggerClient
  class MoveTaskOrderApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Completes counseling for a move task order by id
    # Completes counseling for a move task order by id
    # @param requestor Unique identifier of the user making the request
    # @param move_task_order_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Options] :options 
    # @return [MoveTaskOrder]
    def complete_counseling(requestor, move_task_order_id, opts = {})
      data, _status_code, _headers = complete_counseling_with_http_info(requestor, move_task_order_id, opts)
      data
    end

    # Completes counseling for a move task order by id
    # Completes counseling for a move task order by id
    # @param requestor Unique identifier of the user making the request
    # @param move_task_order_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Options] :options 
    # @return [Array<(MoveTaskOrder, Fixnum, Hash)>] MoveTaskOrder data, response status code and response headers
    def complete_counseling_with_http_info(requestor, move_task_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoveTaskOrderApi.complete_counseling ...'
      end
      # verify the required parameter 'requestor' is set
      if @api_client.config.client_side_validation && requestor.nil?
        fail ArgumentError, "Missing the required parameter 'requestor' when calling MoveTaskOrderApi.complete_counseling"
      end
      # verify the required parameter 'move_task_order_id' is set
      if @api_client.config.client_side_validation && move_task_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'move_task_order_id' when calling MoveTaskOrderApi.complete_counseling"
      end
      # resource path
      local_var_path = '/move_task_orders/{move_task_order_id}/complete_counseling'.sub('{' + 'move_task_order_id' + '}', move_task_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'requestor'] = requestor

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'options'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoveTaskOrder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoveTaskOrderApi#complete_counseling\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a service item for a move order by id
    # Creates a service item for a move order by id
    # @param requestor Unique identifier of the user making the request
    # @param move_task_order_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :filter 
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [ServiceItem]
    def create_service_item(requestor, move_task_order_id, opts = {})
      data, _status_code, _headers = create_service_item_with_http_info(requestor, move_task_order_id, opts)
      data
    end

    # Creates a service item for a move order by id
    # Creates a service item for a move order by id
    # @param requestor Unique identifier of the user making the request
    # @param move_task_order_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :filter 
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(ServiceItem, Fixnum, Hash)>] ServiceItem data, response status code and response headers
    def create_service_item_with_http_info(requestor, move_task_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoveTaskOrderApi.create_service_item ...'
      end
      # verify the required parameter 'requestor' is set
      if @api_client.config.client_side_validation && requestor.nil?
        fail ArgumentError, "Missing the required parameter 'requestor' when calling MoveTaskOrderApi.create_service_item"
      end
      # verify the required parameter 'move_task_order_id' is set
      if @api_client.config.client_side_validation && move_task_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'move_task_order_id' when calling MoveTaskOrderApi.create_service_item"
      end
      # resource path
      local_var_path = '/move_task_orders/{move_task_order_id}/service_items'.sub('{' + 'move_task_order_id' + '}', move_task_order_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :multi) if !opts[:'filter'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'perPage'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'requestor'] = requestor

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoveTaskOrderApi#create_service_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all move task rders
    # Returns a list of move task orders
    # @param requestor Unique identifier of the user making the request
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :filter 
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [MoveTaskOrders]
    def index_move_task_orders(requestor, opts = {})
      data, _status_code, _headers = index_move_task_orders_with_http_info(requestor, opts)
      data
    end

    # List all move task rders
    # Returns a list of move task orders
    # @param requestor Unique identifier of the user making the request
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :filter 
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(MoveTaskOrders, Fixnum, Hash)>] MoveTaskOrders data, response status code and response headers
    def index_move_task_orders_with_http_info(requestor, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoveTaskOrderApi.index_move_task_orders ...'
      end
      # verify the required parameter 'requestor' is set
      if @api_client.config.client_side_validation && requestor.nil?
        fail ArgumentError, "Missing the required parameter 'requestor' when calling MoveTaskOrderApi.index_move_task_orders"
      end
      # resource path
      local_var_path = '/move_task_orders'

      # query parameters
      query_params = {}
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :multi) if !opts[:'filter'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'perPage'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'requestor'] = requestor

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoveTaskOrders')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoveTaskOrderApi#index_move_task_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
